//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4927
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Client {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("clidata")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class clidata : global::System.Data.DataSet {
        
        private 地区DataTable table地区;
        
        private 客户DataTable table客户;
        
        private 供应商DataTable table供应商;
        
        private 门店DataTable table门店;
        
        private 员工DataTable table员工;
        
        private 金料DataTable table金料;
        
        private 石料DataTable table石料;
        
        private 首饰DataTable table首饰;
        
        private 净度DataTable table净度;
        
        private 单位DataTable table单位;
        
        private 仓库DataTable table仓库;
        
        private goodsDataTable tablegoods;
        
        private stongDataTable tablestong;
        
        private 形状DataTable table形状;
        
        private 切工DataTable table切工;
        
        private 金汇分销单DataTable table金汇分销单;
        
        private 颜色DataTable table颜色;
        
        private 入库单列表DataTable table入库单列表;
        
        private 产品状态DataTable table产品状态;
        
        private 分销暂存DataTable table分销暂存;
        
        private 发货单列表DataTable table发货单列表;
        
        private 员工STATDataTable table员工STAT;
        
        private 调成本价DataTable table调成本价;
        
        private 成本查询DataTable table成本查询;
        
        private 调销售价DataTable table调销售价;
        
        private 售价调价记录DataTable table售价调价记录;
        
        private 门店退货DataTable table门店退货;
        
        private 客户积分DataTable table客户积分;
        
        private 供应商进货分析DataTable table供应商进货分析;
        
        private 销售统计DataTable table销售统计;
        
        private 员工销售统计DataTable table员工销售统计;
        
        private 款式销售分析DataTable table款式销售分析;
        
        private 款式销售分析详细DataTable table款式销售分析详细;
        
        private 门店发销退统计DataTable table门店发销退统计;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public clidata() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected clidata(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["地区"] != null)) {
                    base.Tables.Add(new 地区DataTable(ds.Tables["地区"]));
                }
                if ((ds.Tables["客户"] != null)) {
                    base.Tables.Add(new 客户DataTable(ds.Tables["客户"]));
                }
                if ((ds.Tables["供应商"] != null)) {
                    base.Tables.Add(new 供应商DataTable(ds.Tables["供应商"]));
                }
                if ((ds.Tables["门店"] != null)) {
                    base.Tables.Add(new 门店DataTable(ds.Tables["门店"]));
                }
                if ((ds.Tables["员工"] != null)) {
                    base.Tables.Add(new 员工DataTable(ds.Tables["员工"]));
                }
                if ((ds.Tables["金料"] != null)) {
                    base.Tables.Add(new 金料DataTable(ds.Tables["金料"]));
                }
                if ((ds.Tables["石料"] != null)) {
                    base.Tables.Add(new 石料DataTable(ds.Tables["石料"]));
                }
                if ((ds.Tables["首饰"] != null)) {
                    base.Tables.Add(new 首饰DataTable(ds.Tables["首饰"]));
                }
                if ((ds.Tables["净度"] != null)) {
                    base.Tables.Add(new 净度DataTable(ds.Tables["净度"]));
                }
                if ((ds.Tables["单位"] != null)) {
                    base.Tables.Add(new 单位DataTable(ds.Tables["单位"]));
                }
                if ((ds.Tables["仓库"] != null)) {
                    base.Tables.Add(new 仓库DataTable(ds.Tables["仓库"]));
                }
                if ((ds.Tables["goods"] != null)) {
                    base.Tables.Add(new goodsDataTable(ds.Tables["goods"]));
                }
                if ((ds.Tables["stong"] != null)) {
                    base.Tables.Add(new stongDataTable(ds.Tables["stong"]));
                }
                if ((ds.Tables["形状"] != null)) {
                    base.Tables.Add(new 形状DataTable(ds.Tables["形状"]));
                }
                if ((ds.Tables["切工"] != null)) {
                    base.Tables.Add(new 切工DataTable(ds.Tables["切工"]));
                }
                if ((ds.Tables["金汇分销单"] != null)) {
                    base.Tables.Add(new 金汇分销单DataTable(ds.Tables["金汇分销单"]));
                }
                if ((ds.Tables["颜色"] != null)) {
                    base.Tables.Add(new 颜色DataTable(ds.Tables["颜色"]));
                }
                if ((ds.Tables["入库单列表"] != null)) {
                    base.Tables.Add(new 入库单列表DataTable(ds.Tables["入库单列表"]));
                }
                if ((ds.Tables["产品状态"] != null)) {
                    base.Tables.Add(new 产品状态DataTable(ds.Tables["产品状态"]));
                }
                if ((ds.Tables["分销暂存"] != null)) {
                    base.Tables.Add(new 分销暂存DataTable(ds.Tables["分销暂存"]));
                }
                if ((ds.Tables["发货单列表"] != null)) {
                    base.Tables.Add(new 发货单列表DataTable(ds.Tables["发货单列表"]));
                }
                if ((ds.Tables["员工STAT"] != null)) {
                    base.Tables.Add(new 员工STATDataTable(ds.Tables["员工STAT"]));
                }
                if ((ds.Tables["调成本价"] != null)) {
                    base.Tables.Add(new 调成本价DataTable(ds.Tables["调成本价"]));
                }
                if ((ds.Tables["成本查询"] != null)) {
                    base.Tables.Add(new 成本查询DataTable(ds.Tables["成本查询"]));
                }
                if ((ds.Tables["调销售价"] != null)) {
                    base.Tables.Add(new 调销售价DataTable(ds.Tables["调销售价"]));
                }
                if ((ds.Tables["售价调价记录"] != null)) {
                    base.Tables.Add(new 售价调价记录DataTable(ds.Tables["售价调价记录"]));
                }
                if ((ds.Tables["门店退货"] != null)) {
                    base.Tables.Add(new 门店退货DataTable(ds.Tables["门店退货"]));
                }
                if ((ds.Tables["客户积分"] != null)) {
                    base.Tables.Add(new 客户积分DataTable(ds.Tables["客户积分"]));
                }
                if ((ds.Tables["供应商进货分析"] != null)) {
                    base.Tables.Add(new 供应商进货分析DataTable(ds.Tables["供应商进货分析"]));
                }
                if ((ds.Tables["销售统计"] != null)) {
                    base.Tables.Add(new 销售统计DataTable(ds.Tables["销售统计"]));
                }
                if ((ds.Tables["员工销售统计"] != null)) {
                    base.Tables.Add(new 员工销售统计DataTable(ds.Tables["员工销售统计"]));
                }
                if ((ds.Tables["款式销售分析"] != null)) {
                    base.Tables.Add(new 款式销售分析DataTable(ds.Tables["款式销售分析"]));
                }
                if ((ds.Tables["款式销售分析详细"] != null)) {
                    base.Tables.Add(new 款式销售分析详细DataTable(ds.Tables["款式销售分析详细"]));
                }
                if ((ds.Tables["门店发销退统计"] != null)) {
                    base.Tables.Add(new 门店发销退统计DataTable(ds.Tables["门店发销退统计"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 地区DataTable 地区 {
            get {
                return this.table地区;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 客户DataTable 客户 {
            get {
                return this.table客户;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 供应商DataTable 供应商 {
            get {
                return this.table供应商;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门店DataTable 门店 {
            get {
                return this.table门店;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 员工DataTable 员工 {
            get {
                return this.table员工;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 金料DataTable 金料 {
            get {
                return this.table金料;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 石料DataTable 石料 {
            get {
                return this.table石料;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 首饰DataTable 首饰 {
            get {
                return this.table首饰;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 净度DataTable 净度 {
            get {
                return this.table净度;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 单位DataTable 单位 {
            get {
                return this.table单位;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 仓库DataTable 仓库 {
            get {
                return this.table仓库;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public goodsDataTable goods {
            get {
                return this.tablegoods;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stongDataTable stong {
            get {
                return this.tablestong;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 形状DataTable 形状 {
            get {
                return this.table形状;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 切工DataTable 切工 {
            get {
                return this.table切工;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 金汇分销单DataTable 金汇分销单 {
            get {
                return this.table金汇分销单;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 颜色DataTable 颜色 {
            get {
                return this.table颜色;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 入库单列表DataTable 入库单列表 {
            get {
                return this.table入库单列表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 产品状态DataTable 产品状态 {
            get {
                return this.table产品状态;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 分销暂存DataTable 分销暂存 {
            get {
                return this.table分销暂存;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 发货单列表DataTable 发货单列表 {
            get {
                return this.table发货单列表;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 员工STATDataTable 员工STAT {
            get {
                return this.table员工STAT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 调成本价DataTable 调成本价 {
            get {
                return this.table调成本价;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 成本查询DataTable 成本查询 {
            get {
                return this.table成本查询;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 调销售价DataTable 调销售价 {
            get {
                return this.table调销售价;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 售价调价记录DataTable 售价调价记录 {
            get {
                return this.table售价调价记录;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门店退货DataTable 门店退货 {
            get {
                return this.table门店退货;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 客户积分DataTable 客户积分 {
            get {
                return this.table客户积分;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 供应商进货分析DataTable 供应商进货分析 {
            get {
                return this.table供应商进货分析;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 销售统计DataTable 销售统计 {
            get {
                return this.table销售统计;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 员工销售统计DataTable 员工销售统计 {
            get {
                return this.table员工销售统计;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 款式销售分析DataTable 款式销售分析 {
            get {
                return this.table款式销售分析;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 款式销售分析详细DataTable 款式销售分析详细 {
            get {
                return this.table款式销售分析详细;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 门店发销退统计DataTable 门店发销退统计 {
            get {
                return this.table门店发销退统计;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            clidata cln = ((clidata)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["地区"] != null)) {
                    base.Tables.Add(new 地区DataTable(ds.Tables["地区"]));
                }
                if ((ds.Tables["客户"] != null)) {
                    base.Tables.Add(new 客户DataTable(ds.Tables["客户"]));
                }
                if ((ds.Tables["供应商"] != null)) {
                    base.Tables.Add(new 供应商DataTable(ds.Tables["供应商"]));
                }
                if ((ds.Tables["门店"] != null)) {
                    base.Tables.Add(new 门店DataTable(ds.Tables["门店"]));
                }
                if ((ds.Tables["员工"] != null)) {
                    base.Tables.Add(new 员工DataTable(ds.Tables["员工"]));
                }
                if ((ds.Tables["金料"] != null)) {
                    base.Tables.Add(new 金料DataTable(ds.Tables["金料"]));
                }
                if ((ds.Tables["石料"] != null)) {
                    base.Tables.Add(new 石料DataTable(ds.Tables["石料"]));
                }
                if ((ds.Tables["首饰"] != null)) {
                    base.Tables.Add(new 首饰DataTable(ds.Tables["首饰"]));
                }
                if ((ds.Tables["净度"] != null)) {
                    base.Tables.Add(new 净度DataTable(ds.Tables["净度"]));
                }
                if ((ds.Tables["单位"] != null)) {
                    base.Tables.Add(new 单位DataTable(ds.Tables["单位"]));
                }
                if ((ds.Tables["仓库"] != null)) {
                    base.Tables.Add(new 仓库DataTable(ds.Tables["仓库"]));
                }
                if ((ds.Tables["goods"] != null)) {
                    base.Tables.Add(new goodsDataTable(ds.Tables["goods"]));
                }
                if ((ds.Tables["stong"] != null)) {
                    base.Tables.Add(new stongDataTable(ds.Tables["stong"]));
                }
                if ((ds.Tables["形状"] != null)) {
                    base.Tables.Add(new 形状DataTable(ds.Tables["形状"]));
                }
                if ((ds.Tables["切工"] != null)) {
                    base.Tables.Add(new 切工DataTable(ds.Tables["切工"]));
                }
                if ((ds.Tables["金汇分销单"] != null)) {
                    base.Tables.Add(new 金汇分销单DataTable(ds.Tables["金汇分销单"]));
                }
                if ((ds.Tables["颜色"] != null)) {
                    base.Tables.Add(new 颜色DataTable(ds.Tables["颜色"]));
                }
                if ((ds.Tables["入库单列表"] != null)) {
                    base.Tables.Add(new 入库单列表DataTable(ds.Tables["入库单列表"]));
                }
                if ((ds.Tables["产品状态"] != null)) {
                    base.Tables.Add(new 产品状态DataTable(ds.Tables["产品状态"]));
                }
                if ((ds.Tables["分销暂存"] != null)) {
                    base.Tables.Add(new 分销暂存DataTable(ds.Tables["分销暂存"]));
                }
                if ((ds.Tables["发货单列表"] != null)) {
                    base.Tables.Add(new 发货单列表DataTable(ds.Tables["发货单列表"]));
                }
                if ((ds.Tables["员工STAT"] != null)) {
                    base.Tables.Add(new 员工STATDataTable(ds.Tables["员工STAT"]));
                }
                if ((ds.Tables["调成本价"] != null)) {
                    base.Tables.Add(new 调成本价DataTable(ds.Tables["调成本价"]));
                }
                if ((ds.Tables["成本查询"] != null)) {
                    base.Tables.Add(new 成本查询DataTable(ds.Tables["成本查询"]));
                }
                if ((ds.Tables["调销售价"] != null)) {
                    base.Tables.Add(new 调销售价DataTable(ds.Tables["调销售价"]));
                }
                if ((ds.Tables["售价调价记录"] != null)) {
                    base.Tables.Add(new 售价调价记录DataTable(ds.Tables["售价调价记录"]));
                }
                if ((ds.Tables["门店退货"] != null)) {
                    base.Tables.Add(new 门店退货DataTable(ds.Tables["门店退货"]));
                }
                if ((ds.Tables["客户积分"] != null)) {
                    base.Tables.Add(new 客户积分DataTable(ds.Tables["客户积分"]));
                }
                if ((ds.Tables["供应商进货分析"] != null)) {
                    base.Tables.Add(new 供应商进货分析DataTable(ds.Tables["供应商进货分析"]));
                }
                if ((ds.Tables["销售统计"] != null)) {
                    base.Tables.Add(new 销售统计DataTable(ds.Tables["销售统计"]));
                }
                if ((ds.Tables["员工销售统计"] != null)) {
                    base.Tables.Add(new 员工销售统计DataTable(ds.Tables["员工销售统计"]));
                }
                if ((ds.Tables["款式销售分析"] != null)) {
                    base.Tables.Add(new 款式销售分析DataTable(ds.Tables["款式销售分析"]));
                }
                if ((ds.Tables["款式销售分析详细"] != null)) {
                    base.Tables.Add(new 款式销售分析详细DataTable(ds.Tables["款式销售分析详细"]));
                }
                if ((ds.Tables["门店发销退统计"] != null)) {
                    base.Tables.Add(new 门店发销退统计DataTable(ds.Tables["门店发销退统计"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table地区 = ((地区DataTable)(base.Tables["地区"]));
            if ((initTable == true)) {
                if ((this.table地区 != null)) {
                    this.table地区.InitVars();
                }
            }
            this.table客户 = ((客户DataTable)(base.Tables["客户"]));
            if ((initTable == true)) {
                if ((this.table客户 != null)) {
                    this.table客户.InitVars();
                }
            }
            this.table供应商 = ((供应商DataTable)(base.Tables["供应商"]));
            if ((initTable == true)) {
                if ((this.table供应商 != null)) {
                    this.table供应商.InitVars();
                }
            }
            this.table门店 = ((门店DataTable)(base.Tables["门店"]));
            if ((initTable == true)) {
                if ((this.table门店 != null)) {
                    this.table门店.InitVars();
                }
            }
            this.table员工 = ((员工DataTable)(base.Tables["员工"]));
            if ((initTable == true)) {
                if ((this.table员工 != null)) {
                    this.table员工.InitVars();
                }
            }
            this.table金料 = ((金料DataTable)(base.Tables["金料"]));
            if ((initTable == true)) {
                if ((this.table金料 != null)) {
                    this.table金料.InitVars();
                }
            }
            this.table石料 = ((石料DataTable)(base.Tables["石料"]));
            if ((initTable == true)) {
                if ((this.table石料 != null)) {
                    this.table石料.InitVars();
                }
            }
            this.table首饰 = ((首饰DataTable)(base.Tables["首饰"]));
            if ((initTable == true)) {
                if ((this.table首饰 != null)) {
                    this.table首饰.InitVars();
                }
            }
            this.table净度 = ((净度DataTable)(base.Tables["净度"]));
            if ((initTable == true)) {
                if ((this.table净度 != null)) {
                    this.table净度.InitVars();
                }
            }
            this.table单位 = ((单位DataTable)(base.Tables["单位"]));
            if ((initTable == true)) {
                if ((this.table单位 != null)) {
                    this.table单位.InitVars();
                }
            }
            this.table仓库 = ((仓库DataTable)(base.Tables["仓库"]));
            if ((initTable == true)) {
                if ((this.table仓库 != null)) {
                    this.table仓库.InitVars();
                }
            }
            this.tablegoods = ((goodsDataTable)(base.Tables["goods"]));
            if ((initTable == true)) {
                if ((this.tablegoods != null)) {
                    this.tablegoods.InitVars();
                }
            }
            this.tablestong = ((stongDataTable)(base.Tables["stong"]));
            if ((initTable == true)) {
                if ((this.tablestong != null)) {
                    this.tablestong.InitVars();
                }
            }
            this.table形状 = ((形状DataTable)(base.Tables["形状"]));
            if ((initTable == true)) {
                if ((this.table形状 != null)) {
                    this.table形状.InitVars();
                }
            }
            this.table切工 = ((切工DataTable)(base.Tables["切工"]));
            if ((initTable == true)) {
                if ((this.table切工 != null)) {
                    this.table切工.InitVars();
                }
            }
            this.table金汇分销单 = ((金汇分销单DataTable)(base.Tables["金汇分销单"]));
            if ((initTable == true)) {
                if ((this.table金汇分销单 != null)) {
                    this.table金汇分销单.InitVars();
                }
            }
            this.table颜色 = ((颜色DataTable)(base.Tables["颜色"]));
            if ((initTable == true)) {
                if ((this.table颜色 != null)) {
                    this.table颜色.InitVars();
                }
            }
            this.table入库单列表 = ((入库单列表DataTable)(base.Tables["入库单列表"]));
            if ((initTable == true)) {
                if ((this.table入库单列表 != null)) {
                    this.table入库单列表.InitVars();
                }
            }
            this.table产品状态 = ((产品状态DataTable)(base.Tables["产品状态"]));
            if ((initTable == true)) {
                if ((this.table产品状态 != null)) {
                    this.table产品状态.InitVars();
                }
            }
            this.table分销暂存 = ((分销暂存DataTable)(base.Tables["分销暂存"]));
            if ((initTable == true)) {
                if ((this.table分销暂存 != null)) {
                    this.table分销暂存.InitVars();
                }
            }
            this.table发货单列表 = ((发货单列表DataTable)(base.Tables["发货单列表"]));
            if ((initTable == true)) {
                if ((this.table发货单列表 != null)) {
                    this.table发货单列表.InitVars();
                }
            }
            this.table员工STAT = ((员工STATDataTable)(base.Tables["员工STAT"]));
            if ((initTable == true)) {
                if ((this.table员工STAT != null)) {
                    this.table员工STAT.InitVars();
                }
            }
            this.table调成本价 = ((调成本价DataTable)(base.Tables["调成本价"]));
            if ((initTable == true)) {
                if ((this.table调成本价 != null)) {
                    this.table调成本价.InitVars();
                }
            }
            this.table成本查询 = ((成本查询DataTable)(base.Tables["成本查询"]));
            if ((initTable == true)) {
                if ((this.table成本查询 != null)) {
                    this.table成本查询.InitVars();
                }
            }
            this.table调销售价 = ((调销售价DataTable)(base.Tables["调销售价"]));
            if ((initTable == true)) {
                if ((this.table调销售价 != null)) {
                    this.table调销售价.InitVars();
                }
            }
            this.table售价调价记录 = ((售价调价记录DataTable)(base.Tables["售价调价记录"]));
            if ((initTable == true)) {
                if ((this.table售价调价记录 != null)) {
                    this.table售价调价记录.InitVars();
                }
            }
            this.table门店退货 = ((门店退货DataTable)(base.Tables["门店退货"]));
            if ((initTable == true)) {
                if ((this.table门店退货 != null)) {
                    this.table门店退货.InitVars();
                }
            }
            this.table客户积分 = ((客户积分DataTable)(base.Tables["客户积分"]));
            if ((initTable == true)) {
                if ((this.table客户积分 != null)) {
                    this.table客户积分.InitVars();
                }
            }
            this.table供应商进货分析 = ((供应商进货分析DataTable)(base.Tables["供应商进货分析"]));
            if ((initTable == true)) {
                if ((this.table供应商进货分析 != null)) {
                    this.table供应商进货分析.InitVars();
                }
            }
            this.table销售统计 = ((销售统计DataTable)(base.Tables["销售统计"]));
            if ((initTable == true)) {
                if ((this.table销售统计 != null)) {
                    this.table销售统计.InitVars();
                }
            }
            this.table员工销售统计 = ((员工销售统计DataTable)(base.Tables["员工销售统计"]));
            if ((initTable == true)) {
                if ((this.table员工销售统计 != null)) {
                    this.table员工销售统计.InitVars();
                }
            }
            this.table款式销售分析 = ((款式销售分析DataTable)(base.Tables["款式销售分析"]));
            if ((initTable == true)) {
                if ((this.table款式销售分析 != null)) {
                    this.table款式销售分析.InitVars();
                }
            }
            this.table款式销售分析详细 = ((款式销售分析详细DataTable)(base.Tables["款式销售分析详细"]));
            if ((initTable == true)) {
                if ((this.table款式销售分析详细 != null)) {
                    this.table款式销售分析详细.InitVars();
                }
            }
            this.table门店发销退统计 = ((门店发销退统计DataTable)(base.Tables["门店发销退统计"]));
            if ((initTable == true)) {
                if ((this.table门店发销退统计 != null)) {
                    this.table门店发销退统计.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "clidata";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/clidata.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table地区 = new 地区DataTable();
            base.Tables.Add(this.table地区);
            this.table客户 = new 客户DataTable(false);
            base.Tables.Add(this.table客户);
            this.table供应商 = new 供应商DataTable();
            base.Tables.Add(this.table供应商);
            this.table门店 = new 门店DataTable();
            base.Tables.Add(this.table门店);
            this.table员工 = new 员工DataTable();
            base.Tables.Add(this.table员工);
            this.table金料 = new 金料DataTable();
            base.Tables.Add(this.table金料);
            this.table石料 = new 石料DataTable();
            base.Tables.Add(this.table石料);
            this.table首饰 = new 首饰DataTable();
            base.Tables.Add(this.table首饰);
            this.table净度 = new 净度DataTable();
            base.Tables.Add(this.table净度);
            this.table单位 = new 单位DataTable();
            base.Tables.Add(this.table单位);
            this.table仓库 = new 仓库DataTable();
            base.Tables.Add(this.table仓库);
            this.tablegoods = new goodsDataTable(false);
            base.Tables.Add(this.tablegoods);
            this.tablestong = new stongDataTable();
            base.Tables.Add(this.tablestong);
            this.table形状 = new 形状DataTable();
            base.Tables.Add(this.table形状);
            this.table切工 = new 切工DataTable();
            base.Tables.Add(this.table切工);
            this.table金汇分销单 = new 金汇分销单DataTable();
            base.Tables.Add(this.table金汇分销单);
            this.table颜色 = new 颜色DataTable();
            base.Tables.Add(this.table颜色);
            this.table入库单列表 = new 入库单列表DataTable();
            base.Tables.Add(this.table入库单列表);
            this.table产品状态 = new 产品状态DataTable();
            base.Tables.Add(this.table产品状态);
            this.table分销暂存 = new 分销暂存DataTable();
            base.Tables.Add(this.table分销暂存);
            this.table发货单列表 = new 发货单列表DataTable();
            base.Tables.Add(this.table发货单列表);
            this.table员工STAT = new 员工STATDataTable();
            base.Tables.Add(this.table员工STAT);
            this.table调成本价 = new 调成本价DataTable(false);
            base.Tables.Add(this.table调成本价);
            this.table成本查询 = new 成本查询DataTable();
            base.Tables.Add(this.table成本查询);
            this.table调销售价 = new 调销售价DataTable(false);
            base.Tables.Add(this.table调销售价);
            this.table售价调价记录 = new 售价调价记录DataTable();
            base.Tables.Add(this.table售价调价记录);
            this.table门店退货 = new 门店退货DataTable();
            base.Tables.Add(this.table门店退货);
            this.table客户积分 = new 客户积分DataTable(false);
            base.Tables.Add(this.table客户积分);
            this.table供应商进货分析 = new 供应商进货分析DataTable(false);
            base.Tables.Add(this.table供应商进货分析);
            this.table销售统计 = new 销售统计DataTable(false);
            base.Tables.Add(this.table销售统计);
            this.table员工销售统计 = new 员工销售统计DataTable();
            base.Tables.Add(this.table员工销售统计);
            this.table款式销售分析 = new 款式销售分析DataTable();
            base.Tables.Add(this.table款式销售分析);
            this.table款式销售分析详细 = new 款式销售分析详细DataTable();
            base.Tables.Add(this.table款式销售分析详细);
            this.table门店发销退统计 = new 门店发销退统计DataTable();
            base.Tables.Add(this.table门店发销退统计);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize地区() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize客户() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize供应商() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门店() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize员工() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize金料() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize石料() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize首饰() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize净度() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize单位() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize仓库() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegoods() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestong() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize形状() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize切工() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize金汇分销单() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize颜色() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize入库单列表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize产品状态() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize分销暂存() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize发货单列表() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize员工STAT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize调成本价() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize成本查询() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize调销售价() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize售价调价记录() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门店退货() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize客户积分() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize供应商进货分析() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize销售统计() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize员工销售统计() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize款式销售分析() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize款式销售分析详细() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize门店发销退统计() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            clidata ds = new clidata();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.客户.nameColumn.Expression = "xin+min";
            this.goods.nameColumn.Expression = "jliao + sliao + ssi";
            this.goods.zshiColumn.Expression = "zsz + \'/\' + zss";
            this.goods.fshiColumn.Expression = "fsz + \'/\' + fss";
            this.调成本价.NAMEColumn.Expression = "JLIAO+SLIAO+SSI";
            this.调成本价.ZSHIColumn.Expression = "ZSZ + \'/\' + ZSS";
            this.调成本价.FSHIColumn.Expression = "FSZ + \'/\' + FSS";
            this.调销售价.NAMEColumn.Expression = "JLIAO + SLIAO + SSI";
            this.客户积分.NAMEColumn.Expression = "XIN+MIN";
            this.供应商进货分析.HELPColumn.Expression = "\'[\'+SETTIME+\'] 从供应商:[\'+NAME+\']处入库\'";
            this.销售统计.NAMEColumn.Expression = "JLIAO+SLIAO+SSI";
            this.销售统计.ZSHIColumn.Expression = "ZSZ+\'/\'+ZSS";
            this.销售统计.FSHIColumn.Expression = "FSZ+\'/\'+FSS";
        }
        
        public delegate void 地区RowChangeEventHandler(object sender, 地区RowChangeEvent e);
        
        public delegate void 客户RowChangeEventHandler(object sender, 客户RowChangeEvent e);
        
        public delegate void 供应商RowChangeEventHandler(object sender, 供应商RowChangeEvent e);
        
        public delegate void 门店RowChangeEventHandler(object sender, 门店RowChangeEvent e);
        
        public delegate void 员工RowChangeEventHandler(object sender, 员工RowChangeEvent e);
        
        public delegate void 金料RowChangeEventHandler(object sender, 金料RowChangeEvent e);
        
        public delegate void 石料RowChangeEventHandler(object sender, 石料RowChangeEvent e);
        
        public delegate void 首饰RowChangeEventHandler(object sender, 首饰RowChangeEvent e);
        
        public delegate void 净度RowChangeEventHandler(object sender, 净度RowChangeEvent e);
        
        public delegate void 单位RowChangeEventHandler(object sender, 单位RowChangeEvent e);
        
        public delegate void 仓库RowChangeEventHandler(object sender, 仓库RowChangeEvent e);
        
        public delegate void goodsRowChangeEventHandler(object sender, goodsRowChangeEvent e);
        
        public delegate void stongRowChangeEventHandler(object sender, stongRowChangeEvent e);
        
        public delegate void 形状RowChangeEventHandler(object sender, 形状RowChangeEvent e);
        
        public delegate void 切工RowChangeEventHandler(object sender, 切工RowChangeEvent e);
        
        public delegate void 金汇分销单RowChangeEventHandler(object sender, 金汇分销单RowChangeEvent e);
        
        public delegate void 颜色RowChangeEventHandler(object sender, 颜色RowChangeEvent e);
        
        public delegate void 入库单列表RowChangeEventHandler(object sender, 入库单列表RowChangeEvent e);
        
        public delegate void 产品状态RowChangeEventHandler(object sender, 产品状态RowChangeEvent e);
        
        public delegate void 分销暂存RowChangeEventHandler(object sender, 分销暂存RowChangeEvent e);
        
        public delegate void 发货单列表RowChangeEventHandler(object sender, 发货单列表RowChangeEvent e);
        
        public delegate void 员工STATRowChangeEventHandler(object sender, 员工STATRowChangeEvent e);
        
        public delegate void 调成本价RowChangeEventHandler(object sender, 调成本价RowChangeEvent e);
        
        public delegate void 成本查询RowChangeEventHandler(object sender, 成本查询RowChangeEvent e);
        
        public delegate void 调销售价RowChangeEventHandler(object sender, 调销售价RowChangeEvent e);
        
        public delegate void 售价调价记录RowChangeEventHandler(object sender, 售价调价记录RowChangeEvent e);
        
        public delegate void 门店退货RowChangeEventHandler(object sender, 门店退货RowChangeEvent e);
        
        public delegate void 客户积分RowChangeEventHandler(object sender, 客户积分RowChangeEvent e);
        
        public delegate void 供应商进货分析RowChangeEventHandler(object sender, 供应商进货分析RowChangeEvent e);
        
        public delegate void 销售统计RowChangeEventHandler(object sender, 销售统计RowChangeEvent e);
        
        public delegate void 员工销售统计RowChangeEventHandler(object sender, 员工销售统计RowChangeEvent e);
        
        public delegate void 款式销售分析RowChangeEventHandler(object sender, 款式销售分析RowChangeEvent e);
        
        public delegate void 款式销售分析详细RowChangeEventHandler(object sender, 款式销售分析详细RowChangeEvent e);
        
        public delegate void 门店发销退统计RowChangeEventHandler(object sender, 门店发销退统计RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 地区DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnlv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区DataTable() {
                this.TableName = "地区";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 地区DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 地区DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lvColumn {
                get {
                    return this.columnlv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区Row this[int index] {
                get {
                    return ((地区Row)(this.Rows[index]));
                }
            }
            
            public event 地区RowChangeEventHandler 地区RowChanging;
            
            public event 地区RowChangeEventHandler 地区RowChanged;
            
            public event 地区RowChangeEventHandler 地区RowDeleting;
            
            public event 地区RowChangeEventHandler 地区RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add地区Row(地区Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区Row Add地区Row(string id, string name, string lv) {
                地区Row row地区Row = ((地区Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        lv};
                row地区Row.ItemArray = columnValuesArray;
                this.Rows.Add(row地区Row);
                return row地区Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                地区DataTable cln = ((地区DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 地区DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnlv = base.Columns["lv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnlv = new global::System.Data.DataColumn("lv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlv);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区Row New地区Row() {
                return ((地区Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 地区Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(地区Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.地区RowChanged != null)) {
                    this.地区RowChanged(this, new 地区RowChangeEvent(((地区Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.地区RowChanging != null)) {
                    this.地区RowChanging(this, new 地区RowChangeEvent(((地区Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.地区RowDeleted != null)) {
                    this.地区RowDeleted(this, new 地区RowChangeEvent(((地区Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.地区RowDeleting != null)) {
                    this.地区RowDeleting(this, new 地区RowChangeEvent(((地区Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove地区Row(地区Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "地区DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 客户DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnxin;
            
            private global::System.Data.DataColumn columnmin;
            
            private global::System.Data.DataColumn columnsji;
            
            private global::System.Data.DataColumn columnxbie;
            
            private global::System.Data.DataColumn columnnlin;
            
            private global::System.Data.DataColumn columnsri;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columndqusen;
            
            private global::System.Data.DataColumn columndqusi;
            
            private global::System.Data.DataColumn columndzhi;
            
            private global::System.Data.DataColumn columnahao;
            
            private global::System.Data.DataColumn columnzye;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnkhuhao;
            
            private global::System.Data.DataColumn columnzk;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户DataTable(bool initExpressions) {
                this.TableName = "客户";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 客户DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 客户DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xinColumn {
                get {
                    return this.columnxin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn minColumn {
                get {
                    return this.columnmin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sjiColumn {
                get {
                    return this.columnsji;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xbieColumn {
                get {
                    return this.columnxbie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nlinColumn {
                get {
                    return this.columnnlin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sriColumn {
                get {
                    return this.columnsri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusenColumn {
                get {
                    return this.columndqusen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusiColumn {
                get {
                    return this.columndqusi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dzhiColumn {
                get {
                    return this.columndzhi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ahaoColumn {
                get {
                    return this.columnahao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zyeColumn {
                get {
                    return this.columnzye;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn khuhaoColumn {
                get {
                    return this.columnkhuhao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zkColumn {
                get {
                    return this.columnzk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户Row this[int index] {
                get {
                    return ((客户Row)(this.Rows[index]));
                }
            }
            
            public event 客户RowChangeEventHandler 客户RowChanging;
            
            public event 客户RowChangeEventHandler 客户RowChanged;
            
            public event 客户RowChangeEventHandler 客户RowDeleting;
            
            public event 客户RowChangeEventHandler 客户RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add客户Row(客户Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户Row Add客户Row(
                        string id, 
                        string xin, 
                        string min, 
                        string sji, 
                        string xbie, 
                        string nlin, 
                        string sri, 
                        string email, 
                        string dqusen, 
                        string dqusi, 
                        string dzhi, 
                        string ahao, 
                        string zye, 
                        string name, 
                        string khuhao, 
                        double zk) {
                客户Row row客户Row = ((客户Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        xin,
                        min,
                        sji,
                        xbie,
                        nlin,
                        sri,
                        email,
                        dqusen,
                        dqusi,
                        dzhi,
                        ahao,
                        zye,
                        name,
                        khuhao,
                        zk};
                row客户Row.ItemArray = columnValuesArray;
                this.Rows.Add(row客户Row);
                return row客户Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户Row Add客户Row(string id, string xin, string min, string sji, string xbie, string nlin, string sri, string email, string dqusen, string dqusi, string dzhi, string ahao, string zye, string khuhao, double zk) {
                客户Row row客户Row = ((客户Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        xin,
                        min,
                        sji,
                        xbie,
                        nlin,
                        sri,
                        email,
                        dqusen,
                        dqusi,
                        dzhi,
                        ahao,
                        zye,
                        null,
                        khuhao,
                        zk};
                row客户Row.ItemArray = columnValuesArray;
                this.Rows.Add(row客户Row);
                return row客户Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                客户DataTable cln = ((客户DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 客户DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnxin = base.Columns["xin"];
                this.columnmin = base.Columns["min"];
                this.columnsji = base.Columns["sji"];
                this.columnxbie = base.Columns["xbie"];
                this.columnnlin = base.Columns["nlin"];
                this.columnsri = base.Columns["sri"];
                this.columnemail = base.Columns["email"];
                this.columndqusen = base.Columns["dqusen"];
                this.columndqusi = base.Columns["dqusi"];
                this.columndzhi = base.Columns["dzhi"];
                this.columnahao = base.Columns["ahao"];
                this.columnzye = base.Columns["zye"];
                this.columnname = base.Columns["name"];
                this.columnkhuhao = base.Columns["khuhao"];
                this.columnzk = base.Columns["zk"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnxin = new global::System.Data.DataColumn("xin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxin);
                this.columnmin = new global::System.Data.DataColumn("min", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin);
                this.columnsji = new global::System.Data.DataColumn("sji", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsji);
                this.columnxbie = new global::System.Data.DataColumn("xbie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxbie);
                this.columnnlin = new global::System.Data.DataColumn("nlin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnlin);
                this.columnsri = new global::System.Data.DataColumn("sri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsri);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columndqusen = new global::System.Data.DataColumn("dqusen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusen);
                this.columndqusi = new global::System.Data.DataColumn("dqusi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusi);
                this.columndzhi = new global::System.Data.DataColumn("dzhi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndzhi);
                this.columnahao = new global::System.Data.DataColumn("ahao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnahao);
                this.columnzye = new global::System.Data.DataColumn("zye", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzye);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnkhuhao = new global::System.Data.DataColumn("khuhao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkhuhao);
                this.columnzk = new global::System.Data.DataColumn("zk", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzk);
                this.columnname.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户Row New客户Row() {
                return ((客户Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 客户Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(客户Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.nameColumn.Expression = "xin+min";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.客户RowChanged != null)) {
                    this.客户RowChanged(this, new 客户RowChangeEvent(((客户Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.客户RowChanging != null)) {
                    this.客户RowChanging(this, new 客户RowChangeEvent(((客户Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.客户RowDeleted != null)) {
                    this.客户RowDeleted(this, new 客户RowChangeEvent(((客户Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.客户RowDeleting != null)) {
                    this.客户RowDeleting(this, new 客户RowChangeEvent(((客户Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove客户Row(客户Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "客户DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 供应商DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columntel;
            
            private global::System.Data.DataColumn columnczhen;
            
            private global::System.Data.DataColumn columndzhi;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columndqusen;
            
            private global::System.Data.DataColumn columndqusi;
            
            private global::System.Data.DataColumn columntime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商DataTable() {
                this.TableName = "供应商";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 供应商DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 供应商DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telColumn {
                get {
                    return this.columntel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn czhenColumn {
                get {
                    return this.columnczhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dzhiColumn {
                get {
                    return this.columndzhi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusenColumn {
                get {
                    return this.columndqusen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusiColumn {
                get {
                    return this.columndqusi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商Row this[int index] {
                get {
                    return ((供应商Row)(this.Rows[index]));
                }
            }
            
            public event 供应商RowChangeEventHandler 供应商RowChanging;
            
            public event 供应商RowChangeEventHandler 供应商RowChanged;
            
            public event 供应商RowChangeEventHandler 供应商RowDeleting;
            
            public event 供应商RowChangeEventHandler 供应商RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add供应商Row(供应商Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商Row Add供应商Row(string id, string name, string user, string tel, string czhen, string dzhi, string email, string dqusen, string dqusi, string time) {
                供应商Row row供应商Row = ((供应商Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        user,
                        tel,
                        czhen,
                        dzhi,
                        email,
                        dqusen,
                        dqusi,
                        time};
                row供应商Row.ItemArray = columnValuesArray;
                this.Rows.Add(row供应商Row);
                return row供应商Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                供应商DataTable cln = ((供应商DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 供应商DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnuser = base.Columns["user"];
                this.columntel = base.Columns["tel"];
                this.columnczhen = base.Columns["czhen"];
                this.columndzhi = base.Columns["dzhi"];
                this.columnemail = base.Columns["email"];
                this.columndqusen = base.Columns["dqusen"];
                this.columndqusi = base.Columns["dqusi"];
                this.columntime = base.Columns["time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser);
                this.columntel = new global::System.Data.DataColumn("tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntel);
                this.columnczhen = new global::System.Data.DataColumn("czhen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnczhen);
                this.columndzhi = new global::System.Data.DataColumn("dzhi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndzhi);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columndqusen = new global::System.Data.DataColumn("dqusen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusen);
                this.columndqusi = new global::System.Data.DataColumn("dqusi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusi);
                this.columntime = new global::System.Data.DataColumn("time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商Row New供应商Row() {
                return ((供应商Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 供应商Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(供应商Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.供应商RowChanged != null)) {
                    this.供应商RowChanged(this, new 供应商RowChangeEvent(((供应商Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.供应商RowChanging != null)) {
                    this.供应商RowChanging(this, new 供应商RowChangeEvent(((供应商Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.供应商RowDeleted != null)) {
                    this.供应商RowDeleted(this, new 供应商RowChangeEvent(((供应商Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.供应商RowDeleting != null)) {
                    this.供应商RowDeleting(this, new 供应商RowChangeEvent(((供应商Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove供应商Row(供应商Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "供应商DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门店DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columntel;
            
            private global::System.Data.DataColumn columnczhen;
            
            private global::System.Data.DataColumn columndzhi;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columndqusen;
            
            private global::System.Data.DataColumn columndqusi;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店DataTable() {
                this.TableName = "门店";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门店DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telColumn {
                get {
                    return this.columntel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn czhenColumn {
                get {
                    return this.columnczhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dzhiColumn {
                get {
                    return this.columndzhi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusenColumn {
                get {
                    return this.columndqusen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusiColumn {
                get {
                    return this.columndqusi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店Row this[int index] {
                get {
                    return ((门店Row)(this.Rows[index]));
                }
            }
            
            public event 门店RowChangeEventHandler 门店RowChanging;
            
            public event 门店RowChangeEventHandler 门店RowChanged;
            
            public event 门店RowChangeEventHandler 门店RowDeleting;
            
            public event 门店RowChangeEventHandler 门店RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门店Row(门店Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店Row Add门店Row(string id, string name, string user, string tel, string czhen, string dzhi, string email, string dqusen, string dqusi) {
                门店Row row门店Row = ((门店Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        user,
                        tel,
                        czhen,
                        dzhi,
                        email,
                        dqusen,
                        dqusi};
                row门店Row.ItemArray = columnValuesArray;
                this.Rows.Add(row门店Row);
                return row门店Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                门店DataTable cln = ((门店DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 门店DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnuser = base.Columns["user"];
                this.columntel = base.Columns["tel"];
                this.columnczhen = base.Columns["czhen"];
                this.columndzhi = base.Columns["dzhi"];
                this.columnemail = base.Columns["email"];
                this.columndqusen = base.Columns["dqusen"];
                this.columndqusi = base.Columns["dqusi"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser);
                this.columntel = new global::System.Data.DataColumn("tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntel);
                this.columnczhen = new global::System.Data.DataColumn("czhen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnczhen);
                this.columndzhi = new global::System.Data.DataColumn("dzhi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndzhi);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columndqusen = new global::System.Data.DataColumn("dqusen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusen);
                this.columndqusi = new global::System.Data.DataColumn("dqusi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusi);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店Row New门店Row() {
                return ((门店Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 门店Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(门店Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门店RowChanged != null)) {
                    this.门店RowChanged(this, new 门店RowChangeEvent(((门店Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门店RowChanging != null)) {
                    this.门店RowChanging(this, new 门店RowChangeEvent(((门店Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门店RowDeleted != null)) {
                    this.门店RowDeleted(this, new 门店RowChangeEvent(((门店Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门店RowDeleting != null)) {
                    this.门店RowDeleting(this, new 门店RowChangeEvent(((门店Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门店Row(门店Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门店DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 员工DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnsid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnpwd;
            
            private global::System.Data.DataColumn columntel;
            
            private global::System.Data.DataColumn columndqusen;
            
            private global::System.Data.DataColumn columndqusi;
            
            private global::System.Data.DataColumn columnjguan;
            
            private global::System.Data.DataColumn columnxbie;
            
            private global::System.Data.DataColumn columnmdian;
            
            private global::System.Data.DataColumn columntime;
            
            private global::System.Data.DataColumn columnsfzhen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工DataTable() {
                this.TableName = "员工";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 员工DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sidColumn {
                get {
                    return this.columnsid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pwdColumn {
                get {
                    return this.columnpwd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telColumn {
                get {
                    return this.columntel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusenColumn {
                get {
                    return this.columndqusen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dqusiColumn {
                get {
                    return this.columndqusi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jguanColumn {
                get {
                    return this.columnjguan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xbieColumn {
                get {
                    return this.columnxbie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mdianColumn {
                get {
                    return this.columnmdian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sfzhenColumn {
                get {
                    return this.columnsfzhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工Row this[int index] {
                get {
                    return ((员工Row)(this.Rows[index]));
                }
            }
            
            public event 员工RowChangeEventHandler 员工RowChanging;
            
            public event 员工RowChangeEventHandler 员工RowChanged;
            
            public event 员工RowChangeEventHandler 员工RowDeleting;
            
            public event 员工RowChangeEventHandler 员工RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add员工Row(员工Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工Row Add员工Row(string id, string sid, string name, string pwd, string tel, string dqusen, string dqusi, string jguan, string xbie, string mdian, string time, string sfzhen) {
                员工Row row员工Row = ((员工Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        sid,
                        name,
                        pwd,
                        tel,
                        dqusen,
                        dqusi,
                        jguan,
                        xbie,
                        mdian,
                        time,
                        sfzhen};
                row员工Row.ItemArray = columnValuesArray;
                this.Rows.Add(row员工Row);
                return row员工Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                员工DataTable cln = ((员工DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 员工DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnsid = base.Columns["sid"];
                this.columnname = base.Columns["name"];
                this.columnpwd = base.Columns["pwd"];
                this.columntel = base.Columns["tel"];
                this.columndqusen = base.Columns["dqusen"];
                this.columndqusi = base.Columns["dqusi"];
                this.columnjguan = base.Columns["jguan"];
                this.columnxbie = base.Columns["xbie"];
                this.columnmdian = base.Columns["mdian"];
                this.columntime = base.Columns["time"];
                this.columnsfzhen = base.Columns["sfzhen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnsid = new global::System.Data.DataColumn("sid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnpwd = new global::System.Data.DataColumn("pwd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpwd);
                this.columntel = new global::System.Data.DataColumn("tel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntel);
                this.columndqusen = new global::System.Data.DataColumn("dqusen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusen);
                this.columndqusi = new global::System.Data.DataColumn("dqusi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndqusi);
                this.columnjguan = new global::System.Data.DataColumn("jguan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjguan);
                this.columnxbie = new global::System.Data.DataColumn("xbie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxbie);
                this.columnmdian = new global::System.Data.DataColumn("mdian", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmdian);
                this.columntime = new global::System.Data.DataColumn("time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnsfzhen = new global::System.Data.DataColumn("sfzhen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsfzhen);
                this.columnpwd.DefaultValue = ((string)("{密}"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工Row New员工Row() {
                return ((员工Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 员工Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(员工Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.员工RowChanged != null)) {
                    this.员工RowChanged(this, new 员工RowChangeEvent(((员工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.员工RowChanging != null)) {
                    this.员工RowChanging(this, new 员工RowChangeEvent(((员工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.员工RowDeleted != null)) {
                    this.员工RowDeleted(this, new 员工RowChangeEvent(((员工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.员工RowDeleting != null)) {
                    this.员工RowDeleting(this, new 员工RowChangeEvent(((员工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove员工Row(员工Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "员工DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 金料DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料DataTable() {
                this.TableName = "金料";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 金料DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 金料DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料Row this[int index] {
                get {
                    return ((金料Row)(this.Rows[index]));
                }
            }
            
            public event 金料RowChangeEventHandler 金料RowChanging;
            
            public event 金料RowChangeEventHandler 金料RowChanged;
            
            public event 金料RowChangeEventHandler 金料RowDeleting;
            
            public event 金料RowChangeEventHandler 金料RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add金料Row(金料Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料Row Add金料Row(string name) {
                金料Row row金料Row = ((金料Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row金料Row.ItemArray = columnValuesArray;
                this.Rows.Add(row金料Row);
                return row金料Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料Row FindByname(string name) {
                return ((金料Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                金料DataTable cln = ((金料DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 金料DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料Row New金料Row() {
                return ((金料Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 金料Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(金料Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.金料RowChanged != null)) {
                    this.金料RowChanged(this, new 金料RowChangeEvent(((金料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.金料RowChanging != null)) {
                    this.金料RowChanging(this, new 金料RowChangeEvent(((金料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.金料RowDeleted != null)) {
                    this.金料RowDeleted(this, new 金料RowChangeEvent(((金料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.金料RowDeleting != null)) {
                    this.金料RowDeleting(this, new 金料RowChangeEvent(((金料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove金料Row(金料Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "金料DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 石料DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料DataTable() {
                this.TableName = "石料";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 石料DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 石料DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料Row this[int index] {
                get {
                    return ((石料Row)(this.Rows[index]));
                }
            }
            
            public event 石料RowChangeEventHandler 石料RowChanging;
            
            public event 石料RowChangeEventHandler 石料RowChanged;
            
            public event 石料RowChangeEventHandler 石料RowDeleting;
            
            public event 石料RowChangeEventHandler 石料RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add石料Row(石料Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料Row Add石料Row(string name) {
                石料Row row石料Row = ((石料Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row石料Row.ItemArray = columnValuesArray;
                this.Rows.Add(row石料Row);
                return row石料Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料Row FindByname(string name) {
                return ((石料Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                石料DataTable cln = ((石料DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 石料DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料Row New石料Row() {
                return ((石料Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 石料Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(石料Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.石料RowChanged != null)) {
                    this.石料RowChanged(this, new 石料RowChangeEvent(((石料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.石料RowChanging != null)) {
                    this.石料RowChanging(this, new 石料RowChangeEvent(((石料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.石料RowDeleted != null)) {
                    this.石料RowDeleted(this, new 石料RowChangeEvent(((石料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.石料RowDeleting != null)) {
                    this.石料RowDeleting(this, new 石料RowChangeEvent(((石料Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove石料Row(石料Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "石料DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 首饰DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰DataTable() {
                this.TableName = "首饰";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 首饰DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 首饰DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰Row this[int index] {
                get {
                    return ((首饰Row)(this.Rows[index]));
                }
            }
            
            public event 首饰RowChangeEventHandler 首饰RowChanging;
            
            public event 首饰RowChangeEventHandler 首饰RowChanged;
            
            public event 首饰RowChangeEventHandler 首饰RowDeleting;
            
            public event 首饰RowChangeEventHandler 首饰RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add首饰Row(首饰Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰Row Add首饰Row(string name) {
                首饰Row row首饰Row = ((首饰Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row首饰Row.ItemArray = columnValuesArray;
                this.Rows.Add(row首饰Row);
                return row首饰Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰Row FindByname(string name) {
                return ((首饰Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                首饰DataTable cln = ((首饰DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 首饰DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰Row New首饰Row() {
                return ((首饰Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 首饰Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(首饰Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.首饰RowChanged != null)) {
                    this.首饰RowChanged(this, new 首饰RowChangeEvent(((首饰Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.首饰RowChanging != null)) {
                    this.首饰RowChanging(this, new 首饰RowChangeEvent(((首饰Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.首饰RowDeleted != null)) {
                    this.首饰RowDeleted(this, new 首饰RowChangeEvent(((首饰Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.首饰RowDeleting != null)) {
                    this.首饰RowDeleting(this, new 首饰RowChangeEvent(((首饰Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove首饰Row(首饰Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "首饰DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 净度DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度DataTable() {
                this.TableName = "净度";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 净度DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 净度DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度Row this[int index] {
                get {
                    return ((净度Row)(this.Rows[index]));
                }
            }
            
            public event 净度RowChangeEventHandler 净度RowChanging;
            
            public event 净度RowChangeEventHandler 净度RowChanged;
            
            public event 净度RowChangeEventHandler 净度RowDeleting;
            
            public event 净度RowChangeEventHandler 净度RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add净度Row(净度Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度Row Add净度Row(string name) {
                净度Row row净度Row = ((净度Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row净度Row.ItemArray = columnValuesArray;
                this.Rows.Add(row净度Row);
                return row净度Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度Row FindByname(string name) {
                return ((净度Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                净度DataTable cln = ((净度DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 净度DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度Row New净度Row() {
                return ((净度Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 净度Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(净度Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.净度RowChanged != null)) {
                    this.净度RowChanged(this, new 净度RowChangeEvent(((净度Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.净度RowChanging != null)) {
                    this.净度RowChanging(this, new 净度RowChangeEvent(((净度Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.净度RowDeleted != null)) {
                    this.净度RowDeleted(this, new 净度RowChangeEvent(((净度Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.净度RowDeleting != null)) {
                    this.净度RowDeleting(this, new 净度RowChangeEvent(((净度Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove净度Row(净度Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "净度DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 单位DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位DataTable() {
                this.TableName = "单位";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 单位DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 单位DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位Row this[int index] {
                get {
                    return ((单位Row)(this.Rows[index]));
                }
            }
            
            public event 单位RowChangeEventHandler 单位RowChanging;
            
            public event 单位RowChangeEventHandler 单位RowChanged;
            
            public event 单位RowChangeEventHandler 单位RowDeleting;
            
            public event 单位RowChangeEventHandler 单位RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add单位Row(单位Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位Row Add单位Row(string name) {
                单位Row row单位Row = ((单位Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row单位Row.ItemArray = columnValuesArray;
                this.Rows.Add(row单位Row);
                return row单位Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位Row FindByname(string name) {
                return ((单位Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                单位DataTable cln = ((单位DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 单位DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位Row New单位Row() {
                return ((单位Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 单位Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(单位Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.单位RowChanged != null)) {
                    this.单位RowChanged(this, new 单位RowChangeEvent(((单位Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.单位RowChanging != null)) {
                    this.单位RowChanging(this, new 单位RowChangeEvent(((单位Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.单位RowDeleted != null)) {
                    this.单位RowDeleted(this, new 单位RowChangeEvent(((单位Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.单位RowDeleting != null)) {
                    this.单位RowDeleting(this, new 单位RowChangeEvent(((单位Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove单位Row(单位Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "单位DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 仓库DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库DataTable() {
                this.TableName = "仓库";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 仓库DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 仓库DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库Row this[int index] {
                get {
                    return ((仓库Row)(this.Rows[index]));
                }
            }
            
            public event 仓库RowChangeEventHandler 仓库RowChanging;
            
            public event 仓库RowChangeEventHandler 仓库RowChanged;
            
            public event 仓库RowChangeEventHandler 仓库RowDeleting;
            
            public event 仓库RowChangeEventHandler 仓库RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add仓库Row(仓库Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库Row Add仓库Row(string name) {
                仓库Row row仓库Row = ((仓库Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row仓库Row.ItemArray = columnValuesArray;
                this.Rows.Add(row仓库Row);
                return row仓库Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库Row FindByname(string name) {
                return ((仓库Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                仓库DataTable cln = ((仓库DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 仓库DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库Row New仓库Row() {
                return ((仓库Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 仓库Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(仓库Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.仓库RowChanged != null)) {
                    this.仓库RowChanged(this, new 仓库RowChangeEvent(((仓库Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.仓库RowChanging != null)) {
                    this.仓库RowChanging(this, new 仓库RowChangeEvent(((仓库Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.仓库RowDeleted != null)) {
                    this.仓库RowDeleted(this, new 仓库RowChangeEvent(((仓库Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.仓库RowDeleting != null)) {
                    this.仓库RowDeleting(this, new 仓库RowChangeEvent(((仓库Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove仓库Row(仓库Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "仓库DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class goodsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntm;
            
            private global::System.Data.DataColumn columnjliao;
            
            private global::System.Data.DataColumn columnsliao;
            
            private global::System.Data.DataColumn columnssi;
            
            private global::System.Data.DataColumn columnqkou;
            
            private global::System.Data.DataColumn columnzshu;
            
            private global::System.Data.DataColumn columnkus;
            
            private global::System.Data.DataColumn columnhhao;
            
            private global::System.Data.DataColumn columndwei;
            
            private global::System.Data.DataColumn columnsliang;
            
            private global::System.Data.DataColumn columnjianz;
            
            private global::System.Data.DataColumn columnjinz;
            
            private global::System.Data.DataColumn columnpjianz;
            
            private global::System.Data.DataColumn columnblu;
            
            private global::System.Data.DataColumn columnzsz;
            
            private global::System.Data.DataColumn columnzss;
            
            private global::System.Data.DataColumn columnfsz;
            
            private global::System.Data.DataColumn columnfss;
            
            private global::System.Data.DataColumn columncbei;
            
            private global::System.Data.DataColumn columnxsou;
            
            private global::System.Data.DataColumn columnbzhu;
            
            private global::System.Data.DataColumn columnslbol;
            
            private global::System.Data.DataColumn columnimgbol;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnzshi;
            
            private global::System.Data.DataColumn columnfshi;
            
            private global::System.Data.DataColumn columnyse;
            
            private global::System.Data.DataColumn columnxzuang;
            
            private global::System.Data.DataColumn columnqgong;
            
            private global::System.Data.DataColumn columnjdu;
            
            private global::System.Data.DataColumn columnjja;
            
            private global::System.Data.DataColumn columnpjja;
            
            private global::System.Data.DataColumn columnzsja;
            
            private global::System.Data.DataColumn columnzsje;
            
            private global::System.Data.DataColumn columnfsja;
            
            private global::System.Data.DataColumn columnfsje;
            
            private global::System.Data.DataColumn columnjgdj;
            
            private global::System.Data.DataColumn columnother;
            
            private global::System.Data.DataColumn columnjgsh;
            
            private global::System.Data.DataColumn columntheID;
            
            private global::System.Data.DataColumn columnjies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsDataTable(bool initExpressions) {
                this.TableName = "goods";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal goodsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected goodsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmColumn {
                get {
                    return this.columntm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jliaoColumn {
                get {
                    return this.columnjliao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sliaoColumn {
                get {
                    return this.columnsliao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ssiColumn {
                get {
                    return this.columnssi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qkouColumn {
                get {
                    return this.columnqkou;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zshuColumn {
                get {
                    return this.columnzshu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kusColumn {
                get {
                    return this.columnkus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hhaoColumn {
                get {
                    return this.columnhhao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dweiColumn {
                get {
                    return this.columndwei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sliangColumn {
                get {
                    return this.columnsliang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jianzColumn {
                get {
                    return this.columnjianz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jinzColumn {
                get {
                    return this.columnjinz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pjianzColumn {
                get {
                    return this.columnpjianz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bluColumn {
                get {
                    return this.columnblu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zszColumn {
                get {
                    return this.columnzsz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zssColumn {
                get {
                    return this.columnzss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fszColumn {
                get {
                    return this.columnfsz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fssColumn {
                get {
                    return this.columnfss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cbeiColumn {
                get {
                    return this.columncbei;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xsouColumn {
                get {
                    return this.columnxsou;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bzhuColumn {
                get {
                    return this.columnbzhu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn slbolColumn {
                get {
                    return this.columnslbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imgbolColumn {
                get {
                    return this.columnimgbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zshiColumn {
                get {
                    return this.columnzshi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fshiColumn {
                get {
                    return this.columnfshi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yseColumn {
                get {
                    return this.columnyse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xzuangColumn {
                get {
                    return this.columnxzuang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qgongColumn {
                get {
                    return this.columnqgong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jduColumn {
                get {
                    return this.columnjdu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jjaColumn {
                get {
                    return this.columnjja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pjjaColumn {
                get {
                    return this.columnpjja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zsjaColumn {
                get {
                    return this.columnzsja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zsjeColumn {
                get {
                    return this.columnzsje;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fsjaColumn {
                get {
                    return this.columnfsja;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fsjeColumn {
                get {
                    return this.columnfsje;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jgdjColumn {
                get {
                    return this.columnjgdj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn otherColumn {
                get {
                    return this.columnother;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jgshColumn {
                get {
                    return this.columnjgsh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn theIDColumn {
                get {
                    return this.columntheID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jiesColumn {
                get {
                    return this.columnjies;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow this[int index] {
                get {
                    return ((goodsRow)(this.Rows[index]));
                }
            }
            
            public event goodsRowChangeEventHandler goodsRowChanging;
            
            public event goodsRowChangeEventHandler goodsRowChanged;
            
            public event goodsRowChangeEventHandler goodsRowDeleting;
            
            public event goodsRowChangeEventHandler goodsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgoodsRow(goodsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow AddgoodsRow(
                        string id, 
                        string tm, 
                        string jliao, 
                        string sliao, 
                        string ssi, 
                        string qkou, 
                        string zshu, 
                        string kus, 
                        string hhao, 
                        string dwei, 
                        int sliang, 
                        double jianz, 
                        double jinz, 
                        double pjianz, 
                        double blu, 
                        double zsz, 
                        int zss, 
                        double fsz, 
                        int fss, 
                        double cbei, 
                        double xsou, 
                        string bzhu, 
                        bool slbol, 
                        bool imgbol, 
                        string name, 
                        string zshi, 
                        string fshi, 
                        string yse, 
                        string xzuang, 
                        string qgong, 
                        string jdu, 
                        string jja, 
                        string pjja, 
                        string zsja, 
                        string zsje, 
                        string fsja, 
                        string fsje, 
                        string jgdj, 
                        string other, 
                        string jgsh, 
                        double jies) {
                goodsRow rowgoodsRow = ((goodsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        tm,
                        jliao,
                        sliao,
                        ssi,
                        qkou,
                        zshu,
                        kus,
                        hhao,
                        dwei,
                        sliang,
                        jianz,
                        jinz,
                        pjianz,
                        blu,
                        zsz,
                        zss,
                        fsz,
                        fss,
                        cbei,
                        xsou,
                        bzhu,
                        slbol,
                        imgbol,
                        name,
                        zshi,
                        fshi,
                        yse,
                        xzuang,
                        qgong,
                        jdu,
                        jja,
                        pjja,
                        zsja,
                        zsje,
                        fsja,
                        fsje,
                        jgdj,
                        other,
                        jgsh,
                        null,
                        jies};
                rowgoodsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgoodsRow);
                return rowgoodsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow AddgoodsRow(
                        string id, 
                        string tm, 
                        string jliao, 
                        string sliao, 
                        string ssi, 
                        string qkou, 
                        string zshu, 
                        string kus, 
                        string hhao, 
                        string dwei, 
                        int sliang, 
                        double jianz, 
                        double jinz, 
                        double pjianz, 
                        double blu, 
                        double zsz, 
                        int zss, 
                        double fsz, 
                        int fss, 
                        double cbei, 
                        double xsou, 
                        string bzhu, 
                        bool slbol, 
                        bool imgbol, 
                        string yse, 
                        string xzuang, 
                        string qgong, 
                        string jdu, 
                        string jja, 
                        string pjja, 
                        string zsja, 
                        string zsje, 
                        string fsja, 
                        string fsje, 
                        string jgdj, 
                        string other, 
                        string jgsh, 
                        double jies) {
                goodsRow rowgoodsRow = ((goodsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        tm,
                        jliao,
                        sliao,
                        ssi,
                        qkou,
                        zshu,
                        kus,
                        hhao,
                        dwei,
                        sliang,
                        jianz,
                        jinz,
                        pjianz,
                        blu,
                        zsz,
                        zss,
                        fsz,
                        fss,
                        cbei,
                        xsou,
                        bzhu,
                        slbol,
                        imgbol,
                        null,
                        null,
                        null,
                        yse,
                        xzuang,
                        qgong,
                        jdu,
                        jja,
                        pjja,
                        zsja,
                        zsje,
                        fsja,
                        fsje,
                        jgdj,
                        other,
                        jgsh,
                        null,
                        jies};
                rowgoodsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgoodsRow);
                return rowgoodsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow FindBytm(string tm) {
                return ((goodsRow)(this.Rows.Find(new object[] {
                            tm})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                goodsDataTable cln = ((goodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new goodsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntm = base.Columns["tm"];
                this.columnjliao = base.Columns["jliao"];
                this.columnsliao = base.Columns["sliao"];
                this.columnssi = base.Columns["ssi"];
                this.columnqkou = base.Columns["qkou"];
                this.columnzshu = base.Columns["zshu"];
                this.columnkus = base.Columns["kus"];
                this.columnhhao = base.Columns["hhao"];
                this.columndwei = base.Columns["dwei"];
                this.columnsliang = base.Columns["sliang"];
                this.columnjianz = base.Columns["jianz"];
                this.columnjinz = base.Columns["jinz"];
                this.columnpjianz = base.Columns["pjianz"];
                this.columnblu = base.Columns["blu"];
                this.columnzsz = base.Columns["zsz"];
                this.columnzss = base.Columns["zss"];
                this.columnfsz = base.Columns["fsz"];
                this.columnfss = base.Columns["fss"];
                this.columncbei = base.Columns["cbei"];
                this.columnxsou = base.Columns["xsou"];
                this.columnbzhu = base.Columns["bzhu"];
                this.columnslbol = base.Columns["slbol"];
                this.columnimgbol = base.Columns["imgbol"];
                this.columnname = base.Columns["name"];
                this.columnzshi = base.Columns["zshi"];
                this.columnfshi = base.Columns["fshi"];
                this.columnyse = base.Columns["yse"];
                this.columnxzuang = base.Columns["xzuang"];
                this.columnqgong = base.Columns["qgong"];
                this.columnjdu = base.Columns["jdu"];
                this.columnjja = base.Columns["jja"];
                this.columnpjja = base.Columns["pjja"];
                this.columnzsja = base.Columns["zsja"];
                this.columnzsje = base.Columns["zsje"];
                this.columnfsja = base.Columns["fsja"];
                this.columnfsje = base.Columns["fsje"];
                this.columnjgdj = base.Columns["jgdj"];
                this.columnother = base.Columns["other"];
                this.columnjgsh = base.Columns["jgsh"];
                this.columntheID = base.Columns["theID"];
                this.columnjies = base.Columns["jies"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columntm = new global::System.Data.DataColumn("tm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntm);
                this.columnjliao = new global::System.Data.DataColumn("jliao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjliao);
                this.columnsliao = new global::System.Data.DataColumn("sliao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsliao);
                this.columnssi = new global::System.Data.DataColumn("ssi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnssi);
                this.columnqkou = new global::System.Data.DataColumn("qkou", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqkou);
                this.columnzshu = new global::System.Data.DataColumn("zshu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzshu);
                this.columnkus = new global::System.Data.DataColumn("kus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkus);
                this.columnhhao = new global::System.Data.DataColumn("hhao", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhhao);
                this.columndwei = new global::System.Data.DataColumn("dwei", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndwei);
                this.columnsliang = new global::System.Data.DataColumn("sliang", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsliang);
                this.columnjianz = new global::System.Data.DataColumn("jianz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjianz);
                this.columnjinz = new global::System.Data.DataColumn("jinz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjinz);
                this.columnpjianz = new global::System.Data.DataColumn("pjianz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpjianz);
                this.columnblu = new global::System.Data.DataColumn("blu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnblu);
                this.columnzsz = new global::System.Data.DataColumn("zsz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzsz);
                this.columnzss = new global::System.Data.DataColumn("zss", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzss);
                this.columnfsz = new global::System.Data.DataColumn("fsz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfsz);
                this.columnfss = new global::System.Data.DataColumn("fss", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfss);
                this.columncbei = new global::System.Data.DataColumn("cbei", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncbei);
                this.columnxsou = new global::System.Data.DataColumn("xsou", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxsou);
                this.columnbzhu = new global::System.Data.DataColumn("bzhu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbzhu);
                this.columnslbol = new global::System.Data.DataColumn("slbol", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnslbol);
                this.columnimgbol = new global::System.Data.DataColumn("imgbol", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimgbol);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnzshi = new global::System.Data.DataColumn("zshi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzshi);
                this.columnfshi = new global::System.Data.DataColumn("fshi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfshi);
                this.columnyse = new global::System.Data.DataColumn("yse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyse);
                this.columnxzuang = new global::System.Data.DataColumn("xzuang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxzuang);
                this.columnqgong = new global::System.Data.DataColumn("qgong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqgong);
                this.columnjdu = new global::System.Data.DataColumn("jdu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjdu);
                this.columnjja = new global::System.Data.DataColumn("jja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjja);
                this.columnpjja = new global::System.Data.DataColumn("pjja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpjja);
                this.columnzsja = new global::System.Data.DataColumn("zsja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzsja);
                this.columnzsje = new global::System.Data.DataColumn("zsje", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzsje);
                this.columnfsja = new global::System.Data.DataColumn("fsja", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfsja);
                this.columnfsje = new global::System.Data.DataColumn("fsje", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfsje);
                this.columnjgdj = new global::System.Data.DataColumn("jgdj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjgdj);
                this.columnother = new global::System.Data.DataColumn("other", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnother);
                this.columnjgsh = new global::System.Data.DataColumn("jgsh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjgsh);
                this.columntheID = new global::System.Data.DataColumn("theID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntheID);
                this.columnjies = new global::System.Data.DataColumn("jies", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjies);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntm}, true));
                this.columntm.AllowDBNull = false;
                this.columntm.Unique = true;
                this.columnname.ReadOnly = true;
                this.columnzshi.ReadOnly = true;
                this.columnfshi.ReadOnly = true;
                this.columntheID.AutoIncrement = true;
                this.columntheID.AutoIncrementSeed = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow NewgoodsRow() {
                return ((goodsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new goodsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(goodsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.nameColumn.Expression = "jliao + sliao + ssi";
                this.zshiColumn.Expression = "zsz + \'/\' + zss";
                this.fshiColumn.Expression = "fsz + \'/\' + fss";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.goodsRowChanged != null)) {
                    this.goodsRowChanged(this, new goodsRowChangeEvent(((goodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.goodsRowChanging != null)) {
                    this.goodsRowChanging(this, new goodsRowChangeEvent(((goodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.goodsRowDeleted != null)) {
                    this.goodsRowDeleted(this, new goodsRowChangeEvent(((goodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.goodsRowDeleting != null)) {
                    this.goodsRowDeleting(this, new goodsRowChangeEvent(((goodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegoodsRow(goodsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "goodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class stongDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncliid;
            
            private global::System.Data.DataColumn columnzfshi;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnsliang;
            
            private global::System.Data.DataColumn columnzliang;
            
            private global::System.Data.DataColumn columnxzuang;
            
            private global::System.Data.DataColumn columnjdu;
            
            private global::System.Data.DataColumn columnqig;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongDataTable() {
                this.TableName = "stong";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stongDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected stongDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cliidColumn {
                get {
                    return this.columncliid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zfshiColumn {
                get {
                    return this.columnzfshi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sliangColumn {
                get {
                    return this.columnsliang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zliangColumn {
                get {
                    return this.columnzliang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xzuangColumn {
                get {
                    return this.columnxzuang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn jduColumn {
                get {
                    return this.columnjdu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qigColumn {
                get {
                    return this.columnqig;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongRow this[int index] {
                get {
                    return ((stongRow)(this.Rows[index]));
                }
            }
            
            public event stongRowChangeEventHandler stongRowChanging;
            
            public event stongRowChangeEventHandler stongRowChanged;
            
            public event stongRowChangeEventHandler stongRowDeleting;
            
            public event stongRowChangeEventHandler stongRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstongRow(stongRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongRow AddstongRow(string cliid, string zfshi, string name, ushort sliang, decimal zliang, string xzuang, string jdu, string qig) {
                stongRow rowstongRow = ((stongRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        cliid,
                        zfshi,
                        name,
                        sliang,
                        zliang,
                        xzuang,
                        jdu,
                        qig};
                rowstongRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstongRow);
                return rowstongRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                stongDataTable cln = ((stongDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new stongDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncliid = base.Columns["cliid"];
                this.columnzfshi = base.Columns["zfshi"];
                this.columnname = base.Columns["name"];
                this.columnsliang = base.Columns["sliang"];
                this.columnzliang = base.Columns["zliang"];
                this.columnxzuang = base.Columns["xzuang"];
                this.columnjdu = base.Columns["jdu"];
                this.columnqig = base.Columns["qig"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncliid = new global::System.Data.DataColumn("cliid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncliid);
                this.columnzfshi = new global::System.Data.DataColumn("zfshi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzfshi);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnsliang = new global::System.Data.DataColumn("sliang", typeof(ushort), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsliang);
                this.columnzliang = new global::System.Data.DataColumn("zliang", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzliang);
                this.columnxzuang = new global::System.Data.DataColumn("xzuang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxzuang);
                this.columnjdu = new global::System.Data.DataColumn("jdu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnjdu);
                this.columnqig = new global::System.Data.DataColumn("qig", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqig);
                this.columnzfshi.DefaultValue = ((string)("null"));
                this.columnsliang.DefaultValue = ((ushort)(0));
                this.columnzliang.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongRow NewstongRow() {
                return ((stongRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new stongRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(stongRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stongRowChanged != null)) {
                    this.stongRowChanged(this, new stongRowChangeEvent(((stongRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stongRowChanging != null)) {
                    this.stongRowChanging(this, new stongRowChangeEvent(((stongRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stongRowDeleted != null)) {
                    this.stongRowDeleted(this, new stongRowChangeEvent(((stongRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stongRowDeleting != null)) {
                    this.stongRowDeleting(this, new stongRowChangeEvent(((stongRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestongRow(stongRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "stongDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 形状DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状DataTable() {
                this.TableName = "形状";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 形状DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 形状DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状Row this[int index] {
                get {
                    return ((形状Row)(this.Rows[index]));
                }
            }
            
            public event 形状RowChangeEventHandler 形状RowChanging;
            
            public event 形状RowChangeEventHandler 形状RowChanged;
            
            public event 形状RowChangeEventHandler 形状RowDeleting;
            
            public event 形状RowChangeEventHandler 形状RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add形状Row(形状Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状Row Add形状Row(string name) {
                形状Row row形状Row = ((形状Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row形状Row.ItemArray = columnValuesArray;
                this.Rows.Add(row形状Row);
                return row形状Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状Row FindByname(string name) {
                return ((形状Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                形状DataTable cln = ((形状DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 形状DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状Row New形状Row() {
                return ((形状Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 形状Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(形状Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.形状RowChanged != null)) {
                    this.形状RowChanged(this, new 形状RowChangeEvent(((形状Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.形状RowChanging != null)) {
                    this.形状RowChanging(this, new 形状RowChangeEvent(((形状Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.形状RowDeleted != null)) {
                    this.形状RowDeleted(this, new 形状RowChangeEvent(((形状Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.形状RowDeleting != null)) {
                    this.形状RowDeleting(this, new 形状RowChangeEvent(((形状Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove形状Row(形状Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "形状DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 切工DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工DataTable() {
                this.TableName = "切工";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 切工DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 切工DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工Row this[int index] {
                get {
                    return ((切工Row)(this.Rows[index]));
                }
            }
            
            public event 切工RowChangeEventHandler 切工RowChanging;
            
            public event 切工RowChangeEventHandler 切工RowChanged;
            
            public event 切工RowChangeEventHandler 切工RowDeleting;
            
            public event 切工RowChangeEventHandler 切工RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add切工Row(切工Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工Row Add切工Row(string name) {
                切工Row row切工Row = ((切工Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row切工Row.ItemArray = columnValuesArray;
                this.Rows.Add(row切工Row);
                return row切工Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工Row FindByname(string name) {
                return ((切工Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                切工DataTable cln = ((切工DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 切工DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工Row New切工Row() {
                return ((切工Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 切工Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(切工Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.切工RowChanged != null)) {
                    this.切工RowChanged(this, new 切工RowChangeEvent(((切工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.切工RowChanging != null)) {
                    this.切工RowChanging(this, new 切工RowChangeEvent(((切工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.切工RowDeleted != null)) {
                    this.切工RowDeleted(this, new 切工RowChangeEvent(((切工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.切工RowDeleting != null)) {
                    this.切工RowDeleting(this, new 切工RowChangeEvent(((切工Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove切工Row(切工Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "切工DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 金汇分销单DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columnquan;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnsite;
            
            private global::System.Data.DataColumn columnoperator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单DataTable() {
                this.TableName = "金汇分销单";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 金汇分销单DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 金汇分销单DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quanColumn {
                get {
                    return this.columnquan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn siteColumn {
                get {
                    return this.columnsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn operatorColumn {
                get {
                    return this.columnoperator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单Row this[int index] {
                get {
                    return ((金汇分销单Row)(this.Rows[index]));
                }
            }
            
            public event 金汇分销单RowChangeEventHandler 金汇分销单RowChanging;
            
            public event 金汇分销单RowChangeEventHandler 金汇分销单RowChanged;
            
            public event 金汇分销单RowChangeEventHandler 金汇分销单RowDeleting;
            
            public event 金汇分销单RowChangeEventHandler 金汇分销单RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add金汇分销单Row(金汇分销单Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单Row Add金汇分销单Row(string no, string quan, string date, string site, string _operator) {
                金汇分销单Row row金汇分销单Row = ((金汇分销单Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        no,
                        quan,
                        date,
                        site,
                        _operator};
                row金汇分销单Row.ItemArray = columnValuesArray;
                this.Rows.Add(row金汇分销单Row);
                return row金汇分销单Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                金汇分销单DataTable cln = ((金汇分销单DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 金汇分销单DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnno = base.Columns["no"];
                this.columnquan = base.Columns["quan"];
                this.columndate = base.Columns["date"];
                this.columnsite = base.Columns["site"];
                this.columnoperator = base.Columns["operator"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnno = new global::System.Data.DataColumn("no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columnquan = new global::System.Data.DataColumn("quan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquan);
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnsite = new global::System.Data.DataColumn("site", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsite);
                this.columnoperator = new global::System.Data.DataColumn("operator", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnoperator.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "operatorColumn");
                this.columnoperator.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnoperator");
                this.columnoperator.ExtendedProperties.Add("Generator_UserColumnName", "operator");
                base.Columns.Add(this.columnoperator);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单Row New金汇分销单Row() {
                return ((金汇分销单Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 金汇分销单Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(金汇分销单Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.金汇分销单RowChanged != null)) {
                    this.金汇分销单RowChanged(this, new 金汇分销单RowChangeEvent(((金汇分销单Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.金汇分销单RowChanging != null)) {
                    this.金汇分销单RowChanging(this, new 金汇分销单RowChangeEvent(((金汇分销单Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.金汇分销单RowDeleted != null)) {
                    this.金汇分销单RowDeleted(this, new 金汇分销单RowChangeEvent(((金汇分销单Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.金汇分销单RowDeleting != null)) {
                    this.金汇分销单RowDeleting(this, new 金汇分销单RowChangeEvent(((金汇分销单Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove金汇分销单Row(金汇分销单Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "金汇分销单DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 颜色DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色DataTable() {
                this.TableName = "颜色";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 颜色DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 颜色DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色Row this[int index] {
                get {
                    return ((颜色Row)(this.Rows[index]));
                }
            }
            
            public event 颜色RowChangeEventHandler 颜色RowChanging;
            
            public event 颜色RowChangeEventHandler 颜色RowChanged;
            
            public event 颜色RowChangeEventHandler 颜色RowDeleting;
            
            public event 颜色RowChangeEventHandler 颜色RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add颜色Row(颜色Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色Row Add颜色Row(string name) {
                颜色Row row颜色Row = ((颜色Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name};
                row颜色Row.ItemArray = columnValuesArray;
                this.Rows.Add(row颜色Row);
                return row颜色Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色Row FindByname(string name) {
                return ((颜色Row)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                颜色DataTable cln = ((颜色DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 颜色DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色Row New颜色Row() {
                return ((颜色Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 颜色Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(颜色Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.颜色RowChanged != null)) {
                    this.颜色RowChanged(this, new 颜色RowChangeEvent(((颜色Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.颜色RowChanging != null)) {
                    this.颜色RowChanging(this, new 颜色RowChangeEvent(((颜色Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.颜色RowDeleted != null)) {
                    this.颜色RowDeleted(this, new 颜色RowChangeEvent(((颜色Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.颜色RowDeleting != null)) {
                    this.颜色RowDeleting(this, new 颜色RowChangeEvent(((颜色Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove颜色Row(颜色Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "颜色DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 入库单列表DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnxTime;
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnSL;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表DataTable() {
                this.TableName = "入库单列表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 入库单列表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 入库单列表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xTimeColumn {
                get {
                    return this.columnxTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLColumn {
                get {
                    return this.columnSL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表Row this[int index] {
                get {
                    return ((入库单列表Row)(this.Rows[index]));
                }
            }
            
            public event 入库单列表RowChangeEventHandler 入库单列表RowChanging;
            
            public event 入库单列表RowChangeEventHandler 入库单列表RowChanged;
            
            public event 入库单列表RowChangeEventHandler 入库单列表RowDeleting;
            
            public event 入库单列表RowChangeEventHandler 入库单列表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add入库单列表Row(入库单列表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表Row Add入库单列表Row(string xTime, string DH, string SL, string USER) {
                入库单列表Row row入库单列表Row = ((入库单列表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        xTime,
                        DH,
                        SL,
                        USER,
                        null};
                row入库单列表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row入库单列表Row);
                return row入库单列表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表Row FindByDH(string DH) {
                return ((入库单列表Row)(this.Rows.Find(new object[] {
                            DH})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                入库单列表DataTable cln = ((入库单列表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 入库单列表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnxTime = base.Columns["xTime"];
                this.columnDH = base.Columns["DH"];
                this.columnSL = base.Columns["SL"];
                this.columnUSER = base.Columns["USER"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnxTime = new global::System.Data.DataColumn("xTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxTime);
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnSL = new global::System.Data.DataColumn("SL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSL);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDH}, true));
                this.columnDH.AllowDBNull = false;
                this.columnDH.Unique = true;
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表Row New入库单列表Row() {
                return ((入库单列表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 入库单列表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(入库单列表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.入库单列表RowChanged != null)) {
                    this.入库单列表RowChanged(this, new 入库单列表RowChangeEvent(((入库单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.入库单列表RowChanging != null)) {
                    this.入库单列表RowChanging(this, new 入库单列表RowChangeEvent(((入库单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.入库单列表RowDeleted != null)) {
                    this.入库单列表RowDeleted(this, new 入库单列表RowChangeEvent(((入库单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.入库单列表RowDeleting != null)) {
                    this.入库单列表RowDeleting(this, new 入库单列表RowChangeEvent(((入库单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove入库单列表Row(入库单列表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "入库单列表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 产品状态DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnxTime;
            
            private global::System.Data.DataColumn columntm;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columnstat;
            
            private global::System.Data.DataColumn columnmdian;
            
            private global::System.Data.DataColumn columnmdianuser;
            
            private global::System.Data.DataColumn columnsj;
            
            private global::System.Data.DataColumn columnssj;
            
            private global::System.Data.DataColumn columntj;
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnCBEI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态DataTable() {
                this.TableName = "产品状态";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 产品状态DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 产品状态DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xTimeColumn {
                get {
                    return this.columnxTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tmColumn {
                get {
                    return this.columntm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statColumn {
                get {
                    return this.columnstat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mdianColumn {
                get {
                    return this.columnmdian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mdianuserColumn {
                get {
                    return this.columnmdianuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sjColumn {
                get {
                    return this.columnsj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ssjColumn {
                get {
                    return this.columnssj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tjColumn {
                get {
                    return this.columntj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态Row this[int index] {
                get {
                    return ((产品状态Row)(this.Rows[index]));
                }
            }
            
            public event 产品状态RowChangeEventHandler 产品状态RowChanging;
            
            public event 产品状态RowChangeEventHandler 产品状态RowChanged;
            
            public event 产品状态RowChangeEventHandler 产品状态RowDeleting;
            
            public event 产品状态RowChangeEventHandler 产品状态RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add产品状态Row(产品状态Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态Row Add产品状态Row(string xTime, string tm, string user, string stat, string mdian, string mdianuser, string sj, string ssj, string tj, string DH, string CBEI) {
                产品状态Row row产品状态Row = ((产品状态Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        xTime,
                        tm,
                        user,
                        stat,
                        mdian,
                        mdianuser,
                        sj,
                        ssj,
                        tj,
                        DH,
                        CBEI};
                row产品状态Row.ItemArray = columnValuesArray;
                this.Rows.Add(row产品状态Row);
                return row产品状态Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                产品状态DataTable cln = ((产品状态DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 产品状态DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnxTime = base.Columns["xTime"];
                this.columntm = base.Columns["tm"];
                this.columnuser = base.Columns["user"];
                this.columnstat = base.Columns["stat"];
                this.columnmdian = base.Columns["mdian"];
                this.columnmdianuser = base.Columns["mdianuser"];
                this.columnsj = base.Columns["sj"];
                this.columnssj = base.Columns["ssj"];
                this.columntj = base.Columns["tj"];
                this.columnDH = base.Columns["DH"];
                this.columnCBEI = base.Columns["CBEI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnxTime = new global::System.Data.DataColumn("xTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxTime);
                this.columntm = new global::System.Data.DataColumn("tm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntm);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser);
                this.columnstat = new global::System.Data.DataColumn("stat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstat);
                this.columnmdian = new global::System.Data.DataColumn("mdian", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmdian);
                this.columnmdianuser = new global::System.Data.DataColumn("mdianuser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmdianuser);
                this.columnsj = new global::System.Data.DataColumn("sj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsj);
                this.columnssj = new global::System.Data.DataColumn("ssj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnssj);
                this.columntj = new global::System.Data.DataColumn("tj", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntj);
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态Row New产品状态Row() {
                return ((产品状态Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 产品状态Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(产品状态Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.产品状态RowChanged != null)) {
                    this.产品状态RowChanged(this, new 产品状态RowChangeEvent(((产品状态Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.产品状态RowChanging != null)) {
                    this.产品状态RowChanging(this, new 产品状态RowChangeEvent(((产品状态Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.产品状态RowDeleted != null)) {
                    this.产品状态RowDeleted(this, new 产品状态RowChangeEvent(((产品状态Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.产品状态RowDeleting != null)) {
                    this.产品状态RowDeleting(this, new 产品状态RowChangeEvent(((产品状态Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove产品状态Row(产品状态Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "产品状态DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 分销暂存DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnUSER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存DataTable() {
                this.TableName = "分销暂存";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 分销暂存DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 分销暂存DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存Row this[int index] {
                get {
                    return ((分销暂存Row)(this.Rows[index]));
                }
            }
            
            public event 分销暂存RowChangeEventHandler 分销暂存RowChanging;
            
            public event 分销暂存RowChangeEventHandler 分销暂存RowChanged;
            
            public event 分销暂存RowChangeEventHandler 分销暂存RowDeleting;
            
            public event 分销暂存RowChangeEventHandler 分销暂存RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add分销暂存Row(分销暂存Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存Row Add分销暂存Row(string NAME, string USER) {
                分销暂存Row row分销暂存Row = ((分销暂存Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        USER};
                row分销暂存Row.ItemArray = columnValuesArray;
                this.Rows.Add(row分销暂存Row);
                return row分销暂存Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                分销暂存DataTable cln = ((分销暂存DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 分销暂存DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnUSER = base.Columns["USER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存Row New分销暂存Row() {
                return ((分销暂存Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 分销暂存Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(分销暂存Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.分销暂存RowChanged != null)) {
                    this.分销暂存RowChanged(this, new 分销暂存RowChangeEvent(((分销暂存Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.分销暂存RowChanging != null)) {
                    this.分销暂存RowChanging(this, new 分销暂存RowChangeEvent(((分销暂存Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.分销暂存RowDeleted != null)) {
                    this.分销暂存RowDeleted(this, new 分销暂存RowChangeEvent(((分销暂存Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.分销暂存RowDeleting != null)) {
                    this.分销暂存RowDeleting(this, new 分销暂存RowChangeEvent(((分销暂存Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove分销暂存Row(分销暂存Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "分销暂存DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 发货单列表DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnxTime;
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnSL;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnMDIAN;
            
            private global::System.Data.DataColumn columnMDIANUSER;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表DataTable() {
                this.TableName = "发货单列表";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 发货单列表DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 发货单列表DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xTimeColumn {
                get {
                    return this.columnxTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLColumn {
                get {
                    return this.columnSL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANColumn {
                get {
                    return this.columnMDIAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANUSERColumn {
                get {
                    return this.columnMDIANUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表Row this[int index] {
                get {
                    return ((发货单列表Row)(this.Rows[index]));
                }
            }
            
            public event 发货单列表RowChangeEventHandler 发货单列表RowChanging;
            
            public event 发货单列表RowChangeEventHandler 发货单列表RowChanged;
            
            public event 发货单列表RowChangeEventHandler 发货单列表RowDeleting;
            
            public event 发货单列表RowChangeEventHandler 发货单列表RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add发货单列表Row(发货单列表Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表Row Add发货单列表Row(string xTime, string DH, string SL, string USER, string MDIAN, string MDIANUSER) {
                发货单列表Row row发货单列表Row = ((发货单列表Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        xTime,
                        DH,
                        SL,
                        USER,
                        MDIAN,
                        MDIANUSER,
                        null};
                row发货单列表Row.ItemArray = columnValuesArray;
                this.Rows.Add(row发货单列表Row);
                return row发货单列表Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表Row FindByDH(string DH) {
                return ((发货单列表Row)(this.Rows.Find(new object[] {
                            DH})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                发货单列表DataTable cln = ((发货单列表DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 发货单列表DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnxTime = base.Columns["xTime"];
                this.columnDH = base.Columns["DH"];
                this.columnSL = base.Columns["SL"];
                this.columnUSER = base.Columns["USER"];
                this.columnMDIAN = base.Columns["MDIAN"];
                this.columnMDIANUSER = base.Columns["MDIANUSER"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnxTime = new global::System.Data.DataColumn("xTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxTime);
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnSL = new global::System.Data.DataColumn("SL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSL);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnMDIAN = new global::System.Data.DataColumn("MDIAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIAN);
                this.columnMDIANUSER = new global::System.Data.DataColumn("MDIANUSER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIANUSER);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDH}, true));
                this.columnDH.AllowDBNull = false;
                this.columnDH.Unique = true;
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表Row New发货单列表Row() {
                return ((发货单列表Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 发货单列表Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(发货单列表Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.发货单列表RowChanged != null)) {
                    this.发货单列表RowChanged(this, new 发货单列表RowChangeEvent(((发货单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.发货单列表RowChanging != null)) {
                    this.发货单列表RowChanging(this, new 发货单列表RowChangeEvent(((发货单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.发货单列表RowDeleted != null)) {
                    this.发货单列表RowDeleted(this, new 发货单列表RowChangeEvent(((发货单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.发货单列表RowDeleting != null)) {
                    this.发货单列表RowDeleting(this, new 发货单列表RowChangeEvent(((发货单列表Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove发货单列表Row(发货单列表Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "发货单列表DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 员工STATDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnUserStat;
            
            private global::System.Data.DataColumn columnUserZK;
            
            private global::System.Data.DataColumn columnUserName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATDataTable() {
                this.TableName = "员工STAT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工STATDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 员工STATDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserStatColumn {
                get {
                    return this.columnUserStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserZKColumn {
                get {
                    return this.columnUserZK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATRow this[int index] {
                get {
                    return ((员工STATRow)(this.Rows[index]));
                }
            }
            
            public event 员工STATRowChangeEventHandler 员工STATRowChanging;
            
            public event 员工STATRowChangeEventHandler 员工STATRowChanged;
            
            public event 员工STATRowChangeEventHandler 员工STATRowDeleting;
            
            public event 员工STATRowChangeEventHandler 员工STATRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add员工STATRow(员工STATRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATRow Add员工STATRow(string UserID, string UserStat, string UserZK, string UserName) {
                员工STATRow row员工STATRow = ((员工STATRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserID,
                        UserStat,
                        UserZK,
                        UserName};
                row员工STATRow.ItemArray = columnValuesArray;
                this.Rows.Add(row员工STATRow);
                return row员工STATRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                员工STATDataTable cln = ((员工STATDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 员工STATDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserStat = base.Columns["UserStat"];
                this.columnUserZK = base.Columns["UserZK"];
                this.columnUserName = base.Columns["UserName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserStat = new global::System.Data.DataColumn("UserStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserStat);
                this.columnUserZK = new global::System.Data.DataColumn("UserZK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserZK);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATRow New员工STATRow() {
                return ((员工STATRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 员工STATRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(员工STATRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.员工STATRowChanged != null)) {
                    this.员工STATRowChanged(this, new 员工STATRowChangeEvent(((员工STATRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.员工STATRowChanging != null)) {
                    this.员工STATRowChanging(this, new 员工STATRowChangeEvent(((员工STATRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.员工STATRowDeleted != null)) {
                    this.员工STATRowDeleted(this, new 员工STATRowChangeEvent(((员工STATRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.员工STATRowDeleting != null)) {
                    this.员工STATRowDeleting(this, new 员工STATRowChangeEvent(((员工STATRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove员工STATRow(员工STATRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "员工STATDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 调成本价DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnJJA;
            
            private global::System.Data.DataColumn columnPJJA;
            
            private global::System.Data.DataColumn columnZSJA;
            
            private global::System.Data.DataColumn columnZSJE;
            
            private global::System.Data.DataColumn columnFSJA;
            
            private global::System.Data.DataColumn columnFSJE;
            
            private global::System.Data.DataColumn columnJGDJ;
            
            private global::System.Data.DataColumn columnOTHER;
            
            private global::System.Data.DataColumn columnJGSH;
            
            private global::System.Data.DataColumn columnZSS;
            
            private global::System.Data.DataColumn columnZSZ;
            
            private global::System.Data.DataColumn columnFSS;
            
            private global::System.Data.DataColumn columnFSZ;
            
            private global::System.Data.DataColumn columnJLIAO;
            
            private global::System.Data.DataColumn columnSLIAO;
            
            private global::System.Data.DataColumn columnSSI;
            
            private global::System.Data.DataColumn columnZSHI;
            
            private global::System.Data.DataColumn columnFSHI;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnJINZ;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价DataTable(bool initExpressions) {
                this.TableName = "调成本价";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 调成本价DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 调成本价DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JJAColumn {
                get {
                    return this.columnJJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PJJAColumn {
                get {
                    return this.columnPJJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSJAColumn {
                get {
                    return this.columnZSJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSJEColumn {
                get {
                    return this.columnZSJE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSJAColumn {
                get {
                    return this.columnFSJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSJEColumn {
                get {
                    return this.columnFSJE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JGDJColumn {
                get {
                    return this.columnJGDJ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTHERColumn {
                get {
                    return this.columnOTHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JGSHColumn {
                get {
                    return this.columnJGSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSSColumn {
                get {
                    return this.columnZSS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSZColumn {
                get {
                    return this.columnZSZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSSColumn {
                get {
                    return this.columnFSS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSZColumn {
                get {
                    return this.columnFSZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLIAOColumn {
                get {
                    return this.columnJLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIAOColumn {
                get {
                    return this.columnSLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSIColumn {
                get {
                    return this.columnSSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSHIColumn {
                get {
                    return this.columnZSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSHIColumn {
                get {
                    return this.columnFSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JINZColumn {
                get {
                    return this.columnJINZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row this[int index] {
                get {
                    return ((调成本价Row)(this.Rows[index]));
                }
            }
            
            public event 调成本价RowChangeEventHandler 调成本价RowChanging;
            
            public event 调成本价RowChangeEventHandler 调成本价RowChanged;
            
            public event 调成本价RowChangeEventHandler 调成本价RowDeleting;
            
            public event 调成本价RowChangeEventHandler 调成本价RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add调成本价Row(调成本价Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row Add调成本价Row(
                        string TM, 
                        string NAME, 
                        double JJA, 
                        double PJJA, 
                        double ZSJA, 
                        double ZSJE, 
                        double FSJA, 
                        double FSJE, 
                        double JGDJ, 
                        double OTHER, 
                        double JGSH, 
                        double ZSS, 
                        double ZSZ, 
                        double FSS, 
                        double FSZ, 
                        string JLIAO, 
                        string SLIAO, 
                        string SSI, 
                        string ZSHI, 
                        string FSHI, 
                        double CBEI, 
                        double JINZ) {
                调成本价Row row调成本价Row = ((调成本价Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        NAME,
                        JJA,
                        PJJA,
                        ZSJA,
                        ZSJE,
                        FSJA,
                        FSJE,
                        JGDJ,
                        OTHER,
                        JGSH,
                        ZSS,
                        ZSZ,
                        FSS,
                        FSZ,
                        JLIAO,
                        SLIAO,
                        SSI,
                        ZSHI,
                        FSHI,
                        CBEI,
                        JINZ};
                row调成本价Row.ItemArray = columnValuesArray;
                this.Rows.Add(row调成本价Row);
                return row调成本价Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row Add调成本价Row(
                        string TM, 
                        double JJA, 
                        double PJJA, 
                        double ZSJA, 
                        double ZSJE, 
                        double FSJA, 
                        double FSJE, 
                        double JGDJ, 
                        double OTHER, 
                        double JGSH, 
                        double ZSS, 
                        double ZSZ, 
                        double FSS, 
                        double FSZ, 
                        string JLIAO, 
                        string SLIAO, 
                        string SSI, 
                        double CBEI, 
                        double JINZ) {
                调成本价Row row调成本价Row = ((调成本价Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        null,
                        JJA,
                        PJJA,
                        ZSJA,
                        ZSJE,
                        FSJA,
                        FSJE,
                        JGDJ,
                        OTHER,
                        JGSH,
                        ZSS,
                        ZSZ,
                        FSS,
                        FSZ,
                        JLIAO,
                        SLIAO,
                        SSI,
                        null,
                        null,
                        CBEI,
                        JINZ};
                row调成本价Row.ItemArray = columnValuesArray;
                this.Rows.Add(row调成本价Row);
                return row调成本价Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row FindByTM(string TM) {
                return ((调成本价Row)(this.Rows.Find(new object[] {
                            TM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                调成本价DataTable cln = ((调成本价DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 调成本价DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTM = base.Columns["TM"];
                this.columnNAME = base.Columns["NAME"];
                this.columnJJA = base.Columns["JJA"];
                this.columnPJJA = base.Columns["PJJA"];
                this.columnZSJA = base.Columns["ZSJA"];
                this.columnZSJE = base.Columns["ZSJE"];
                this.columnFSJA = base.Columns["FSJA"];
                this.columnFSJE = base.Columns["FSJE"];
                this.columnJGDJ = base.Columns["JGDJ"];
                this.columnOTHER = base.Columns["OTHER"];
                this.columnJGSH = base.Columns["JGSH"];
                this.columnZSS = base.Columns["ZSS"];
                this.columnZSZ = base.Columns["ZSZ"];
                this.columnFSS = base.Columns["FSS"];
                this.columnFSZ = base.Columns["FSZ"];
                this.columnJLIAO = base.Columns["JLIAO"];
                this.columnSLIAO = base.Columns["SLIAO"];
                this.columnSSI = base.Columns["SSI"];
                this.columnZSHI = base.Columns["ZSHI"];
                this.columnFSHI = base.Columns["FSHI"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnJINZ = base.Columns["JINZ"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnJJA = new global::System.Data.DataColumn("JJA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJJA);
                this.columnPJJA = new global::System.Data.DataColumn("PJJA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPJJA);
                this.columnZSJA = new global::System.Data.DataColumn("ZSJA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSJA);
                this.columnZSJE = new global::System.Data.DataColumn("ZSJE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSJE);
                this.columnFSJA = new global::System.Data.DataColumn("FSJA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSJA);
                this.columnFSJE = new global::System.Data.DataColumn("FSJE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSJE);
                this.columnJGDJ = new global::System.Data.DataColumn("JGDJ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJGDJ);
                this.columnOTHER = new global::System.Data.DataColumn("OTHER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHER);
                this.columnJGSH = new global::System.Data.DataColumn("JGSH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJGSH);
                this.columnZSS = new global::System.Data.DataColumn("ZSS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSS);
                this.columnZSZ = new global::System.Data.DataColumn("ZSZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSZ);
                this.columnFSS = new global::System.Data.DataColumn("FSS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSS);
                this.columnFSZ = new global::System.Data.DataColumn("FSZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSZ);
                this.columnJLIAO = new global::System.Data.DataColumn("JLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLIAO);
                this.columnSLIAO = new global::System.Data.DataColumn("SLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIAO);
                this.columnSSI = new global::System.Data.DataColumn("SSI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSI);
                this.columnZSHI = new global::System.Data.DataColumn("ZSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSHI);
                this.columnFSHI = new global::System.Data.DataColumn("FSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSHI);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnJINZ = new global::System.Data.DataColumn("JINZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJINZ);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTM}, true));
                this.columnTM.AllowDBNull = false;
                this.columnTM.Unique = true;
                this.columnNAME.ReadOnly = true;
                this.columnZSHI.ReadOnly = true;
                this.columnFSHI.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row New调成本价Row() {
                return ((调成本价Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 调成本价Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(调成本价Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NAMEColumn.Expression = "JLIAO+SLIAO+SSI";
                this.ZSHIColumn.Expression = "ZSZ + \'/\' + ZSS";
                this.FSHIColumn.Expression = "FSZ + \'/\' + FSS";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.调成本价RowChanged != null)) {
                    this.调成本价RowChanged(this, new 调成本价RowChangeEvent(((调成本价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.调成本价RowChanging != null)) {
                    this.调成本价RowChanging(this, new 调成本价RowChangeEvent(((调成本价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.调成本价RowDeleted != null)) {
                    this.调成本价RowDeleted(this, new 调成本价RowChangeEvent(((调成本价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.调成本价RowDeleting != null)) {
                    this.调成本价RowDeleting(this, new 调成本价RowChangeEvent(((调成本价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove调成本价Row(调成本价Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "调成本价DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 成本查询DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSETDATE;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnSTAT;
            
            private global::System.Data.DataColumn columnJJA;
            
            private global::System.Data.DataColumn columnPJJA;
            
            private global::System.Data.DataColumn columnZSJA;
            
            private global::System.Data.DataColumn columnZSJE;
            
            private global::System.Data.DataColumn columnFSJA;
            
            private global::System.Data.DataColumn columnFSJE;
            
            private global::System.Data.DataColumn columnJGDJ;
            
            private global::System.Data.DataColumn columnOTHER;
            
            private global::System.Data.DataColumn columnJGSH;
            
            private global::System.Data.DataColumn columnZSHI;
            
            private global::System.Data.DataColumn columnFSHI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询DataTable() {
                this.TableName = "成本查询";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 成本查询DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 成本查询DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETDATEColumn {
                get {
                    return this.columnSETDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATColumn {
                get {
                    return this.columnSTAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JJAColumn {
                get {
                    return this.columnJJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PJJAColumn {
                get {
                    return this.columnPJJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSJAColumn {
                get {
                    return this.columnZSJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSJEColumn {
                get {
                    return this.columnZSJE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSJAColumn {
                get {
                    return this.columnFSJA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSJEColumn {
                get {
                    return this.columnFSJE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JGDJColumn {
                get {
                    return this.columnJGDJ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTHERColumn {
                get {
                    return this.columnOTHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JGSHColumn {
                get {
                    return this.columnJGSH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSHIColumn {
                get {
                    return this.columnZSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSHIColumn {
                get {
                    return this.columnFSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询Row this[int index] {
                get {
                    return ((成本查询Row)(this.Rows[index]));
                }
            }
            
            public event 成本查询RowChangeEventHandler 成本查询RowChanging;
            
            public event 成本查询RowChangeEventHandler 成本查询RowChanged;
            
            public event 成本查询RowChangeEventHandler 成本查询RowDeleting;
            
            public event 成本查询RowChangeEventHandler 成本查询RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add成本查询Row(成本查询Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询Row Add成本查询Row(
                        string TM, 
                        string CBEI, 
                        string SETDATE, 
                        string USER, 
                        string STAT, 
                        string JJA, 
                        string PJJA, 
                        string ZSJA, 
                        string ZSJE, 
                        string FSJA, 
                        string FSJE, 
                        string JGDJ, 
                        string OTHER, 
                        string JGSH, 
                        string ZSHI, 
                        string FSHI) {
                成本查询Row row成本查询Row = ((成本查询Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        CBEI,
                        SETDATE,
                        USER,
                        STAT,
                        JJA,
                        PJJA,
                        ZSJA,
                        ZSJE,
                        FSJA,
                        FSJE,
                        JGDJ,
                        OTHER,
                        JGSH,
                        ZSHI,
                        FSHI};
                row成本查询Row.ItemArray = columnValuesArray;
                this.Rows.Add(row成本查询Row);
                return row成本查询Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                成本查询DataTable cln = ((成本查询DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 成本查询DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTM = base.Columns["TM"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSETDATE = base.Columns["SETDATE"];
                this.columnUSER = base.Columns["USER"];
                this.columnSTAT = base.Columns["STAT"];
                this.columnJJA = base.Columns["JJA"];
                this.columnPJJA = base.Columns["PJJA"];
                this.columnZSJA = base.Columns["ZSJA"];
                this.columnZSJE = base.Columns["ZSJE"];
                this.columnFSJA = base.Columns["FSJA"];
                this.columnFSJE = base.Columns["FSJE"];
                this.columnJGDJ = base.Columns["JGDJ"];
                this.columnOTHER = base.Columns["OTHER"];
                this.columnJGSH = base.Columns["JGSH"];
                this.columnZSHI = base.Columns["ZSHI"];
                this.columnFSHI = base.Columns["FSHI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSETDATE = new global::System.Data.DataColumn("SETDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETDATE);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnSTAT = new global::System.Data.DataColumn("STAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAT);
                this.columnJJA = new global::System.Data.DataColumn("JJA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJJA);
                this.columnPJJA = new global::System.Data.DataColumn("PJJA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPJJA);
                this.columnZSJA = new global::System.Data.DataColumn("ZSJA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSJA);
                this.columnZSJE = new global::System.Data.DataColumn("ZSJE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSJE);
                this.columnFSJA = new global::System.Data.DataColumn("FSJA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSJA);
                this.columnFSJE = new global::System.Data.DataColumn("FSJE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSJE);
                this.columnJGDJ = new global::System.Data.DataColumn("JGDJ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJGDJ);
                this.columnOTHER = new global::System.Data.DataColumn("OTHER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHER);
                this.columnJGSH = new global::System.Data.DataColumn("JGSH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJGSH);
                this.columnZSHI = new global::System.Data.DataColumn("ZSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSHI);
                this.columnFSHI = new global::System.Data.DataColumn("FSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSHI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询Row New成本查询Row() {
                return ((成本查询Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 成本查询Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(成本查询Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.成本查询RowChanged != null)) {
                    this.成本查询RowChanged(this, new 成本查询RowChangeEvent(((成本查询Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.成本查询RowChanging != null)) {
                    this.成本查询RowChanging(this, new 成本查询RowChangeEvent(((成本查询Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.成本查询RowDeleted != null)) {
                    this.成本查询RowDeleted(this, new 成本查询RowChangeEvent(((成本查询Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.成本查询RowDeleting != null)) {
                    this.成本查询RowDeleting(this, new 成本查询RowChangeEvent(((成本查询Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove成本查询Row(成本查询Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "成本查询DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 调销售价DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnMONY;
            
            private global::System.Data.DataColumn columnSETDATE;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnSTAT;
            
            private global::System.Data.DataColumn columnBLU;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSLIAO;
            
            private global::System.Data.DataColumn columnJLIAO;
            
            private global::System.Data.DataColumn columnSSI;
            
            private global::System.Data.DataColumn columnIMGBOL;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnBZHU;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价DataTable(bool initExpressions) {
                this.TableName = "调销售价";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 调销售价DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 调销售价DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MONYColumn {
                get {
                    return this.columnMONY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETDATEColumn {
                get {
                    return this.columnSETDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATColumn {
                get {
                    return this.columnSTAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLUColumn {
                get {
                    return this.columnBLU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIAOColumn {
                get {
                    return this.columnSLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLIAOColumn {
                get {
                    return this.columnJLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSIColumn {
                get {
                    return this.columnSSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMGBOLColumn {
                get {
                    return this.columnIMGBOL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BZHUColumn {
                get {
                    return this.columnBZHU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row this[int index] {
                get {
                    return ((调销售价Row)(this.Rows[index]));
                }
            }
            
            public event 调销售价RowChangeEventHandler 调销售价RowChanging;
            
            public event 调销售价RowChangeEventHandler 调销售价RowChanged;
            
            public event 调销售价RowChangeEventHandler 调销售价RowDeleting;
            
            public event 调销售价RowChangeEventHandler 调销售价RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add调销售价Row(调销售价Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row Add调销售价Row(string DH, string TM, double MONY, string SETDATE, string USER, string STAT, double BLU, double CBEI, string SLIAO, string JLIAO, string SSI, bool IMGBOL, string NAME, string BZHU) {
                调销售价Row row调销售价Row = ((调销售价Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DH,
                        TM,
                        MONY,
                        SETDATE,
                        USER,
                        STAT,
                        BLU,
                        CBEI,
                        SLIAO,
                        JLIAO,
                        SSI,
                        IMGBOL,
                        NAME,
                        BZHU};
                row调销售价Row.ItemArray = columnValuesArray;
                this.Rows.Add(row调销售价Row);
                return row调销售价Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row Add调销售价Row(string DH, string TM, double MONY, string SETDATE, string USER, string STAT, double BLU, double CBEI, string SLIAO, string JLIAO, string SSI, bool IMGBOL, string BZHU) {
                调销售价Row row调销售价Row = ((调销售价Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DH,
                        TM,
                        MONY,
                        SETDATE,
                        USER,
                        STAT,
                        BLU,
                        CBEI,
                        SLIAO,
                        JLIAO,
                        SSI,
                        IMGBOL,
                        null,
                        BZHU};
                row调销售价Row.ItemArray = columnValuesArray;
                this.Rows.Add(row调销售价Row);
                return row调销售价Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row FindByTM(string TM) {
                return ((调销售价Row)(this.Rows.Find(new object[] {
                            TM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                调销售价DataTable cln = ((调销售价DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 调销售价DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDH = base.Columns["DH"];
                this.columnTM = base.Columns["TM"];
                this.columnMONY = base.Columns["MONY"];
                this.columnSETDATE = base.Columns["SETDATE"];
                this.columnUSER = base.Columns["USER"];
                this.columnSTAT = base.Columns["STAT"];
                this.columnBLU = base.Columns["BLU"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSLIAO = base.Columns["SLIAO"];
                this.columnJLIAO = base.Columns["JLIAO"];
                this.columnSSI = base.Columns["SSI"];
                this.columnIMGBOL = base.Columns["IMGBOL"];
                this.columnNAME = base.Columns["NAME"];
                this.columnBZHU = base.Columns["BZHU"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnMONY = new global::System.Data.DataColumn("MONY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONY);
                this.columnSETDATE = new global::System.Data.DataColumn("SETDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETDATE);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnSTAT = new global::System.Data.DataColumn("STAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAT);
                this.columnBLU = new global::System.Data.DataColumn("BLU", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLU);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSLIAO = new global::System.Data.DataColumn("SLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIAO);
                this.columnJLIAO = new global::System.Data.DataColumn("JLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLIAO);
                this.columnSSI = new global::System.Data.DataColumn("SSI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSI);
                this.columnIMGBOL = new global::System.Data.DataColumn("IMGBOL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMGBOL);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnBZHU = new global::System.Data.DataColumn("BZHU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBZHU);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTM}, true));
                this.columnTM.AllowDBNull = false;
                this.columnTM.Unique = true;
                this.columnNAME.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row New调销售价Row() {
                return ((调销售价Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 调销售价Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(调销售价Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NAMEColumn.Expression = "JLIAO + SLIAO + SSI";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.调销售价RowChanged != null)) {
                    this.调销售价RowChanged(this, new 调销售价RowChangeEvent(((调销售价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.调销售价RowChanging != null)) {
                    this.调销售价RowChanging(this, new 调销售价RowChangeEvent(((调销售价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.调销售价RowDeleted != null)) {
                    this.调销售价RowDeleted(this, new 调销售价RowChangeEvent(((调销售价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.调销售价RowDeleting != null)) {
                    this.调销售价RowDeleting(this, new 调销售价RowChangeEvent(((调销售价Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove调销售价Row(调销售价Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "调销售价DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 售价调价记录DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnMONY;
            
            private global::System.Data.DataColumn columnSETDATE;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnSTAT;
            
            private global::System.Data.DataColumn columnBLU;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录DataTable() {
                this.TableName = "售价调价记录";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 售价调价记录DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 售价调价记录DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MONYColumn {
                get {
                    return this.columnMONY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETDATEColumn {
                get {
                    return this.columnSETDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATColumn {
                get {
                    return this.columnSTAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLUColumn {
                get {
                    return this.columnBLU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录Row this[int index] {
                get {
                    return ((售价调价记录Row)(this.Rows[index]));
                }
            }
            
            public event 售价调价记录RowChangeEventHandler 售价调价记录RowChanging;
            
            public event 售价调价记录RowChangeEventHandler 售价调价记录RowChanged;
            
            public event 售价调价记录RowChangeEventHandler 售价调价记录RowDeleting;
            
            public event 售价调价记录RowChangeEventHandler 售价调价记录RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add售价调价记录Row(售价调价记录Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录Row Add售价调价记录Row(string DH, string TM, string MONY, string SETDATE, string USER, string STAT, string BLU, string CBEI) {
                售价调价记录Row row售价调价记录Row = ((售价调价记录Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DH,
                        TM,
                        MONY,
                        SETDATE,
                        USER,
                        STAT,
                        BLU,
                        CBEI,
                        null};
                row售价调价记录Row.ItemArray = columnValuesArray;
                this.Rows.Add(row售价调价记录Row);
                return row售价调价记录Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                售价调价记录DataTable cln = ((售价调价记录DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 售价调价记录DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDH = base.Columns["DH"];
                this.columnTM = base.Columns["TM"];
                this.columnMONY = base.Columns["MONY"];
                this.columnSETDATE = base.Columns["SETDATE"];
                this.columnUSER = base.Columns["USER"];
                this.columnSTAT = base.Columns["STAT"];
                this.columnBLU = base.Columns["BLU"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnMONY = new global::System.Data.DataColumn("MONY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONY);
                this.columnSETDATE = new global::System.Data.DataColumn("SETDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETDATE);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnSTAT = new global::System.Data.DataColumn("STAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAT);
                this.columnBLU = new global::System.Data.DataColumn("BLU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLU);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录Row New售价调价记录Row() {
                return ((售价调价记录Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 售价调价记录Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(售价调价记录Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.售价调价记录RowChanged != null)) {
                    this.售价调价记录RowChanged(this, new 售价调价记录RowChangeEvent(((售价调价记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.售价调价记录RowChanging != null)) {
                    this.售价调价记录RowChanging(this, new 售价调价记录RowChangeEvent(((售价调价记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.售价调价记录RowDeleted != null)) {
                    this.售价调价记录RowDeleted(this, new 售价调价记录RowChangeEvent(((售价调价记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.售价调价记录RowDeleting != null)) {
                    this.售价调价记录RowDeleting(this, new 售价调价记录RowChangeEvent(((售价调价记录Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove售价调价记录Row(售价调价记录Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "售价调价记录DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门店退货DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnSETTIME;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnMDIAN;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnSBM;
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnUSERS;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnnTXT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货DataTable() {
                this.TableName = "门店退货";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店退货DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门店退货DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETTIMEColumn {
                get {
                    return this.columnSETTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANColumn {
                get {
                    return this.columnMDIAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SBMColumn {
                get {
                    return this.columnSBM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERSColumn {
                get {
                    return this.columnUSERS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTXTColumn {
                get {
                    return this.columnnTXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货Row this[int index] {
                get {
                    return ((门店退货Row)(this.Rows[index]));
                }
            }
            
            public event 门店退货RowChangeEventHandler 门店退货RowChanging;
            
            public event 门店退货RowChangeEventHandler 门店退货RowChanged;
            
            public event 门店退货RowChangeEventHandler 门店退货RowDeleting;
            
            public event 门店退货RowChangeEventHandler 门店退货RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门店退货Row(门店退货Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货Row Add门店退货Row(string TM, string SETTIME, string USER, string MDIAN, string SLIANG, string SBM, string DH, string USERS, string nTXT) {
                门店退货Row row门店退货Row = ((门店退货Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        SETTIME,
                        USER,
                        MDIAN,
                        SLIANG,
                        SBM,
                        DH,
                        USERS,
                        null,
                        nTXT};
                row门店退货Row.ItemArray = columnValuesArray;
                this.Rows.Add(row门店退货Row);
                return row门店退货Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                门店退货DataTable cln = ((门店退货DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 门店退货DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTM = base.Columns["TM"];
                this.columnSETTIME = base.Columns["SETTIME"];
                this.columnUSER = base.Columns["USER"];
                this.columnMDIAN = base.Columns["MDIAN"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnSBM = base.Columns["SBM"];
                this.columnDH = base.Columns["DH"];
                this.columnUSERS = base.Columns["USERS"];
                this.columnID = base.Columns["ID"];
                this.columnnTXT = base.Columns["nTXT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnSETTIME = new global::System.Data.DataColumn("SETTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTIME);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnMDIAN = new global::System.Data.DataColumn("MDIAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIAN);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnSBM = new global::System.Data.DataColumn("SBM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSBM);
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnUSERS = new global::System.Data.DataColumn("USERS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERS);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnnTXT = new global::System.Data.DataColumn("nTXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTXT);
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货Row New门店退货Row() {
                return ((门店退货Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 门店退货Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(门店退货Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门店退货RowChanged != null)) {
                    this.门店退货RowChanged(this, new 门店退货RowChangeEvent(((门店退货Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门店退货RowChanging != null)) {
                    this.门店退货RowChanging(this, new 门店退货RowChangeEvent(((门店退货Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门店退货RowDeleted != null)) {
                    this.门店退货RowDeleted(this, new 门店退货RowChangeEvent(((门店退货Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门店退货RowDeleting != null)) {
                    this.门店退货RowDeleting(this, new 门店退货RowChangeEvent(((门店退货Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门店退货Row(门店退货Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门店退货DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 客户积分DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnKHH;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnXBIE;
            
            private global::System.Data.DataColumn columnSRI;
            
            private global::System.Data.DataColumn columnEMAIL;
            
            private global::System.Data.DataColumn columnDQUSEN;
            
            private global::System.Data.DataColumn columnDQUSI;
            
            private global::System.Data.DataColumn columnSJI;
            
            private global::System.Data.DataColumn columnJF;
            
            private global::System.Data.DataColumn columnXIN;
            
            private global::System.Data.DataColumn columnMIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分DataTable(bool initExpressions) {
                this.TableName = "客户积分";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 客户积分DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 客户积分DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KHHColumn {
                get {
                    return this.columnKHH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XBIEColumn {
                get {
                    return this.columnXBIE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRIColumn {
                get {
                    return this.columnSRI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQUSENColumn {
                get {
                    return this.columnDQUSEN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DQUSIColumn {
                get {
                    return this.columnDQUSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SJIColumn {
                get {
                    return this.columnSJI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JFColumn {
                get {
                    return this.columnJF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XINColumn {
                get {
                    return this.columnXIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MINColumn {
                get {
                    return this.columnMIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分Row this[int index] {
                get {
                    return ((客户积分Row)(this.Rows[index]));
                }
            }
            
            public event 客户积分RowChangeEventHandler 客户积分RowChanging;
            
            public event 客户积分RowChangeEventHandler 客户积分RowChanged;
            
            public event 客户积分RowChangeEventHandler 客户积分RowDeleting;
            
            public event 客户积分RowChangeEventHandler 客户积分RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add客户积分Row(客户积分Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分Row Add客户积分Row(string KHH, string NAME, string XBIE, string SRI, string EMAIL, string DQUSEN, string DQUSI, string SJI, int JF, string XIN, string MIN) {
                客户积分Row row客户积分Row = ((客户积分Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        KHH,
                        NAME,
                        XBIE,
                        SRI,
                        EMAIL,
                        DQUSEN,
                        DQUSI,
                        SJI,
                        JF,
                        XIN,
                        MIN};
                row客户积分Row.ItemArray = columnValuesArray;
                this.Rows.Add(row客户积分Row);
                return row客户积分Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分Row Add客户积分Row(string KHH, string XBIE, string SRI, string EMAIL, string DQUSEN, string DQUSI, string SJI, int JF, string XIN, string MIN) {
                客户积分Row row客户积分Row = ((客户积分Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        KHH,
                        null,
                        XBIE,
                        SRI,
                        EMAIL,
                        DQUSEN,
                        DQUSI,
                        SJI,
                        JF,
                        XIN,
                        MIN};
                row客户积分Row.ItemArray = columnValuesArray;
                this.Rows.Add(row客户积分Row);
                return row客户积分Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                客户积分DataTable cln = ((客户积分DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 客户积分DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnKHH = base.Columns["KHH"];
                this.columnNAME = base.Columns["NAME"];
                this.columnXBIE = base.Columns["XBIE"];
                this.columnSRI = base.Columns["SRI"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnDQUSEN = base.Columns["DQUSEN"];
                this.columnDQUSI = base.Columns["DQUSI"];
                this.columnSJI = base.Columns["SJI"];
                this.columnJF = base.Columns["JF"];
                this.columnXIN = base.Columns["XIN"];
                this.columnMIN = base.Columns["MIN"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnKHH = new global::System.Data.DataColumn("KHH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKHH);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnXBIE = new global::System.Data.DataColumn("XBIE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXBIE);
                this.columnSRI = new global::System.Data.DataColumn("SRI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRI);
                this.columnEMAIL = new global::System.Data.DataColumn("EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnDQUSEN = new global::System.Data.DataColumn("DQUSEN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQUSEN);
                this.columnDQUSI = new global::System.Data.DataColumn("DQUSI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDQUSI);
                this.columnSJI = new global::System.Data.DataColumn("SJI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSJI);
                this.columnJF = new global::System.Data.DataColumn("JF", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJF);
                this.columnXIN = new global::System.Data.DataColumn("XIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXIN);
                this.columnMIN = new global::System.Data.DataColumn("MIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIN);
                this.columnid.AutoIncrement = true;
                this.columnNAME.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分Row New客户积分Row() {
                return ((客户积分Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 客户积分Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(客户积分Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NAMEColumn.Expression = "XIN+MIN";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.客户积分RowChanged != null)) {
                    this.客户积分RowChanged(this, new 客户积分RowChangeEvent(((客户积分Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.客户积分RowChanging != null)) {
                    this.客户积分RowChanging(this, new 客户积分RowChangeEvent(((客户积分Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.客户积分RowDeleted != null)) {
                    this.客户积分RowDeleted(this, new 客户积分RowChangeEvent(((客户积分Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.客户积分RowDeleting != null)) {
                    this.客户积分RowDeleting(this, new 客户积分RowChangeEvent(((客户积分Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove客户积分Row(客户积分Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "客户积分DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 供应商进货分析DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHELP;
            
            private global::System.Data.DataColumn columnDH;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnJIANZ;
            
            private global::System.Data.DataColumn columnJINZ;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSETTIME;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析DataTable(bool initExpressions) {
                this.TableName = "供应商进货分析";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 供应商进货分析DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 供应商进货分析DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HELPColumn {
                get {
                    return this.columnHELP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DHColumn {
                get {
                    return this.columnDH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JIANZColumn {
                get {
                    return this.columnJIANZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JINZColumn {
                get {
                    return this.columnJINZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETTIMEColumn {
                get {
                    return this.columnSETTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析Row this[int index] {
                get {
                    return ((供应商进货分析Row)(this.Rows[index]));
                }
            }
            
            public event 供应商进货分析RowChangeEventHandler 供应商进货分析RowChanging;
            
            public event 供应商进货分析RowChangeEventHandler 供应商进货分析RowChanged;
            
            public event 供应商进货分析RowChangeEventHandler 供应商进货分析RowDeleting;
            
            public event 供应商进货分析RowChangeEventHandler 供应商进货分析RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add供应商进货分析Row(供应商进货分析Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析Row Add供应商进货分析Row(string HELP, string DH, string SLIANG, string JIANZ, string JINZ, string CBEI, string SETTIME, string NAME) {
                供应商进货分析Row row供应商进货分析Row = ((供应商进货分析Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HELP,
                        DH,
                        SLIANG,
                        JIANZ,
                        JINZ,
                        CBEI,
                        SETTIME,
                        NAME};
                row供应商进货分析Row.ItemArray = columnValuesArray;
                this.Rows.Add(row供应商进货分析Row);
                return row供应商进货分析Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析Row Add供应商进货分析Row(string DH, string SLIANG, string JIANZ, string JINZ, string CBEI, string SETTIME, string NAME) {
                供应商进货分析Row row供应商进货分析Row = ((供应商进货分析Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DH,
                        SLIANG,
                        JIANZ,
                        JINZ,
                        CBEI,
                        SETTIME,
                        NAME};
                row供应商进货分析Row.ItemArray = columnValuesArray;
                this.Rows.Add(row供应商进货分析Row);
                return row供应商进货分析Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                供应商进货分析DataTable cln = ((供应商进货分析DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 供应商进货分析DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHELP = base.Columns["HELP"];
                this.columnDH = base.Columns["DH"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnJIANZ = base.Columns["JIANZ"];
                this.columnJINZ = base.Columns["JINZ"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSETTIME = base.Columns["SETTIME"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHELP = new global::System.Data.DataColumn("HELP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHELP);
                this.columnDH = new global::System.Data.DataColumn("DH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDH);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnJIANZ = new global::System.Data.DataColumn("JIANZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJIANZ);
                this.columnJINZ = new global::System.Data.DataColumn("JINZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJINZ);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSETTIME = new global::System.Data.DataColumn("SETTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTIME);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnHELP.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析Row New供应商进货分析Row() {
                return ((供应商进货分析Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 供应商进货分析Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(供应商进货分析Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.HELPColumn.Expression = "\'[\'+SETTIME+\'] 从供应商:[\'+NAME+\']处入库\'";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.供应商进货分析RowChanged != null)) {
                    this.供应商进货分析RowChanged(this, new 供应商进货分析RowChangeEvent(((供应商进货分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.供应商进货分析RowChanging != null)) {
                    this.供应商进货分析RowChanging(this, new 供应商进货分析RowChangeEvent(((供应商进货分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.供应商进货分析RowDeleted != null)) {
                    this.供应商进货分析RowDeleted(this, new 供应商进货分析RowChangeEvent(((供应商进货分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.供应商进货分析RowDeleting != null)) {
                    this.供应商进货分析RowDeleting(this, new 供应商进货分析RowChangeEvent(((供应商进货分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove供应商进货分析Row(供应商进货分析Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "供应商进货分析DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 销售统计DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnJINZ;
            
            private global::System.Data.DataColumn columnJIANZ;
            
            private global::System.Data.DataColumn columnZSHI;
            
            private global::System.Data.DataColumn columnFSHI;
            
            private global::System.Data.DataColumn columnIMGBOL;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSALE;
            
            private global::System.Data.DataColumn columnZK;
            
            private global::System.Data.DataColumn columnSSALE;
            
            private global::System.Data.DataColumn columnSETTIME;
            
            private global::System.Data.DataColumn columnZSS;
            
            private global::System.Data.DataColumn columnZSZ;
            
            private global::System.Data.DataColumn columnFSS;
            
            private global::System.Data.DataColumn columnFSZ;
            
            private global::System.Data.DataColumn columnJLIAO;
            
            private global::System.Data.DataColumn columnSLIAO;
            
            private global::System.Data.DataColumn columnSSI;
            
            private global::System.Data.DataColumn columnKHU;
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnKUS;
            
            private global::System.Data.DataColumn columnZSHU;
            
            private global::System.Data.DataColumn columnMDIAN;
            
            private global::System.Data.DataColumn columnSBM;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnDWEI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计DataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计DataTable(bool initExpressions) {
                this.TableName = "销售统计";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 销售统计DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 销售统计DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JINZColumn {
                get {
                    return this.columnJINZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JIANZColumn {
                get {
                    return this.columnJIANZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSHIColumn {
                get {
                    return this.columnZSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSHIColumn {
                get {
                    return this.columnFSHI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMGBOLColumn {
                get {
                    return this.columnIMGBOL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SALEColumn {
                get {
                    return this.columnSALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZKColumn {
                get {
                    return this.columnZK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSALEColumn {
                get {
                    return this.columnSSALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETTIMEColumn {
                get {
                    return this.columnSETTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSSColumn {
                get {
                    return this.columnZSS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSZColumn {
                get {
                    return this.columnZSZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSSColumn {
                get {
                    return this.columnFSS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSZColumn {
                get {
                    return this.columnFSZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLIAOColumn {
                get {
                    return this.columnJLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIAOColumn {
                get {
                    return this.columnSLIAO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSIColumn {
                get {
                    return this.columnSSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KHUColumn {
                get {
                    return this.columnKHU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KUSColumn {
                get {
                    return this.columnKUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZSHUColumn {
                get {
                    return this.columnZSHU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANColumn {
                get {
                    return this.columnMDIAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SBMColumn {
                get {
                    return this.columnSBM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DWEIColumn {
                get {
                    return this.columnDWEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计Row this[int index] {
                get {
                    return ((销售统计Row)(this.Rows[index]));
                }
            }
            
            public event 销售统计RowChangeEventHandler 销售统计RowChanging;
            
            public event 销售统计RowChangeEventHandler 销售统计RowChanged;
            
            public event 销售统计RowChangeEventHandler 销售统计RowDeleting;
            
            public event 销售统计RowChangeEventHandler 销售统计RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add销售统计Row(销售统计Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计Row Add销售统计Row(
                        string TM, 
                        string NAME, 
                        double JINZ, 
                        double JIANZ, 
                        string ZSHI, 
                        string FSHI, 
                        bool IMGBOL, 
                        double CBEI, 
                        double SALE, 
                        string ZK, 
                        double SSALE, 
                        string SETTIME, 
                        string ZSS, 
                        string ZSZ, 
                        string FSS, 
                        string FSZ, 
                        string JLIAO, 
                        string SLIAO, 
                        string SSI, 
                        string KHU, 
                        string USER, 
                        string KUS, 
                        string ZSHU, 
                        string MDIAN, 
                        string SBM, 
                        int SLIANG, 
                        string DWEI) {
                销售统计Row row销售统计Row = ((销售统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        NAME,
                        JINZ,
                        JIANZ,
                        ZSHI,
                        FSHI,
                        IMGBOL,
                        CBEI,
                        SALE,
                        ZK,
                        SSALE,
                        SETTIME,
                        ZSS,
                        ZSZ,
                        FSS,
                        FSZ,
                        JLIAO,
                        SLIAO,
                        SSI,
                        KHU,
                        USER,
                        KUS,
                        ZSHU,
                        MDIAN,
                        SBM,
                        null,
                        SLIANG,
                        DWEI};
                row销售统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row销售统计Row);
                return row销售统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计Row Add销售统计Row(
                        string TM, 
                        double JINZ, 
                        double JIANZ, 
                        bool IMGBOL, 
                        double CBEI, 
                        double SALE, 
                        string ZK, 
                        double SSALE, 
                        string SETTIME, 
                        string ZSS, 
                        string ZSZ, 
                        string FSS, 
                        string FSZ, 
                        string JLIAO, 
                        string SLIAO, 
                        string SSI, 
                        string KHU, 
                        string USER, 
                        string KUS, 
                        string ZSHU, 
                        string MDIAN, 
                        string SBM, 
                        int SLIANG, 
                        string DWEI) {
                销售统计Row row销售统计Row = ((销售统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        null,
                        JINZ,
                        JIANZ,
                        null,
                        null,
                        IMGBOL,
                        CBEI,
                        SALE,
                        ZK,
                        SSALE,
                        SETTIME,
                        ZSS,
                        ZSZ,
                        FSS,
                        FSZ,
                        JLIAO,
                        SLIAO,
                        SSI,
                        KHU,
                        USER,
                        KUS,
                        ZSHU,
                        MDIAN,
                        SBM,
                        null,
                        SLIANG,
                        DWEI};
                row销售统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row销售统计Row);
                return row销售统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                销售统计DataTable cln = ((销售统计DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 销售统计DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTM = base.Columns["TM"];
                this.columnNAME = base.Columns["NAME"];
                this.columnJINZ = base.Columns["JINZ"];
                this.columnJIANZ = base.Columns["JIANZ"];
                this.columnZSHI = base.Columns["ZSHI"];
                this.columnFSHI = base.Columns["FSHI"];
                this.columnIMGBOL = base.Columns["IMGBOL"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSALE = base.Columns["SALE"];
                this.columnZK = base.Columns["ZK"];
                this.columnSSALE = base.Columns["SSALE"];
                this.columnSETTIME = base.Columns["SETTIME"];
                this.columnZSS = base.Columns["ZSS"];
                this.columnZSZ = base.Columns["ZSZ"];
                this.columnFSS = base.Columns["FSS"];
                this.columnFSZ = base.Columns["FSZ"];
                this.columnJLIAO = base.Columns["JLIAO"];
                this.columnSLIAO = base.Columns["SLIAO"];
                this.columnSSI = base.Columns["SSI"];
                this.columnKHU = base.Columns["KHU"];
                this.columnUSER = base.Columns["USER"];
                this.columnKUS = base.Columns["KUS"];
                this.columnZSHU = base.Columns["ZSHU"];
                this.columnMDIAN = base.Columns["MDIAN"];
                this.columnSBM = base.Columns["SBM"];
                this.columnID = base.Columns["ID"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnDWEI = base.Columns["DWEI"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnJINZ = new global::System.Data.DataColumn("JINZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJINZ);
                this.columnJIANZ = new global::System.Data.DataColumn("JIANZ", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJIANZ);
                this.columnZSHI = new global::System.Data.DataColumn("ZSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSHI);
                this.columnFSHI = new global::System.Data.DataColumn("FSHI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSHI);
                this.columnIMGBOL = new global::System.Data.DataColumn("IMGBOL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMGBOL);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSALE = new global::System.Data.DataColumn("SALE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALE);
                this.columnZK = new global::System.Data.DataColumn("ZK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZK);
                this.columnSSALE = new global::System.Data.DataColumn("SSALE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSALE);
                this.columnSETTIME = new global::System.Data.DataColumn("SETTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTIME);
                this.columnZSS = new global::System.Data.DataColumn("ZSS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSS);
                this.columnZSZ = new global::System.Data.DataColumn("ZSZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSZ);
                this.columnFSS = new global::System.Data.DataColumn("FSS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSS);
                this.columnFSZ = new global::System.Data.DataColumn("FSZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSZ);
                this.columnJLIAO = new global::System.Data.DataColumn("JLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLIAO);
                this.columnSLIAO = new global::System.Data.DataColumn("SLIAO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIAO);
                this.columnSSI = new global::System.Data.DataColumn("SSI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSI);
                this.columnKHU = new global::System.Data.DataColumn("KHU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKHU);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnKUS = new global::System.Data.DataColumn("KUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKUS);
                this.columnZSHU = new global::System.Data.DataColumn("ZSHU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZSHU);
                this.columnMDIAN = new global::System.Data.DataColumn("MDIAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIAN);
                this.columnSBM = new global::System.Data.DataColumn("SBM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSBM);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnDWEI = new global::System.Data.DataColumn("DWEI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDWEI);
                this.columnNAME.ReadOnly = true;
                this.columnZSHI.ReadOnly = true;
                this.columnFSHI.ReadOnly = true;
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计Row New销售统计Row() {
                return ((销售统计Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 销售统计Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(销售统计Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NAMEColumn.Expression = "JLIAO+SLIAO+SSI";
                this.ZSHIColumn.Expression = "ZSZ+\'/\'+ZSS";
                this.FSHIColumn.Expression = "FSZ+\'/\'+FSS";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.销售统计RowChanged != null)) {
                    this.销售统计RowChanged(this, new 销售统计RowChangeEvent(((销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.销售统计RowChanging != null)) {
                    this.销售统计RowChanging(this, new 销售统计RowChangeEvent(((销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.销售统计RowDeleted != null)) {
                    this.销售统计RowDeleted(this, new 销售统计RowChangeEvent(((销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.销售统计RowDeleting != null)) {
                    this.销售统计RowDeleting(this, new 销售统计RowChangeEvent(((销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove销售统计Row(销售统计Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "销售统计DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 员工销售统计DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUSER;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnSSALE;
            
            private global::System.Data.DataColumn columnMDIAN;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计DataTable() {
                this.TableName = "员工销售统计";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工销售统计DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 员工销售统计DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSALEColumn {
                get {
                    return this.columnSSALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANColumn {
                get {
                    return this.columnMDIAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计Row this[int index] {
                get {
                    return ((员工销售统计Row)(this.Rows[index]));
                }
            }
            
            public event 员工销售统计RowChangeEventHandler 员工销售统计RowChanging;
            
            public event 员工销售统计RowChangeEventHandler 员工销售统计RowChanged;
            
            public event 员工销售统计RowChangeEventHandler 员工销售统计RowDeleting;
            
            public event 员工销售统计RowChangeEventHandler 员工销售统计RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add员工销售统计Row(员工销售统计Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计Row Add员工销售统计Row(string USER, int SLIANG, double SSALE, string MDIAN) {
                员工销售统计Row row员工销售统计Row = ((员工销售统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        USER,
                        SLIANG,
                        SSALE,
                        MDIAN,
                        null};
                row员工销售统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row员工销售统计Row);
                return row员工销售统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                员工销售统计DataTable cln = ((员工销售统计DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 员工销售统计DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUSER = base.Columns["USER"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnSSALE = base.Columns["SSALE"];
                this.columnMDIAN = base.Columns["MDIAN"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnSSALE = new global::System.Data.DataColumn("SSALE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSALE);
                this.columnMDIAN = new global::System.Data.DataColumn("MDIAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIAN);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计Row New员工销售统计Row() {
                return ((员工销售统计Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 员工销售统计Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(员工销售统计Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.员工销售统计RowChanged != null)) {
                    this.员工销售统计RowChanged(this, new 员工销售统计RowChangeEvent(((员工销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.员工销售统计RowChanging != null)) {
                    this.员工销售统计RowChanging(this, new 员工销售统计RowChangeEvent(((员工销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.员工销售统计RowDeleted != null)) {
                    this.员工销售统计RowDeleted(this, new 员工销售统计RowChangeEvent(((员工销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.员工销售统计RowDeleting != null)) {
                    this.员工销售统计RowDeleting(this, new 员工销售统计RowChangeEvent(((员工销售统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove员工销售统计Row(员工销售统计Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "员工销售统计DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 款式销售分析DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKUS;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSSALE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析DataTable() {
                this.TableName = "款式销售分析";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 款式销售分析DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 款式销售分析DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KUSColumn {
                get {
                    return this.columnKUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSALEColumn {
                get {
                    return this.columnSSALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析Row this[int index] {
                get {
                    return ((款式销售分析Row)(this.Rows[index]));
                }
            }
            
            public event 款式销售分析RowChangeEventHandler 款式销售分析RowChanging;
            
            public event 款式销售分析RowChangeEventHandler 款式销售分析RowChanged;
            
            public event 款式销售分析RowChangeEventHandler 款式销售分析RowDeleting;
            
            public event 款式销售分析RowChangeEventHandler 款式销售分析RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add款式销售分析Row(款式销售分析Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析Row Add款式销售分析Row(string KUS, short SLIANG, double CBEI, double SSALE) {
                款式销售分析Row row款式销售分析Row = ((款式销售分析Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KUS,
                        SLIANG,
                        CBEI,
                        SSALE};
                row款式销售分析Row.ItemArray = columnValuesArray;
                this.Rows.Add(row款式销售分析Row);
                return row款式销售分析Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                款式销售分析DataTable cln = ((款式销售分析DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 款式销售分析DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKUS = base.Columns["KUS"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSSALE = base.Columns["SSALE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKUS = new global::System.Data.DataColumn("KUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKUS);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSSALE = new global::System.Data.DataColumn("SSALE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSALE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析Row New款式销售分析Row() {
                return ((款式销售分析Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 款式销售分析Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(款式销售分析Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.款式销售分析RowChanged != null)) {
                    this.款式销售分析RowChanged(this, new 款式销售分析RowChangeEvent(((款式销售分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.款式销售分析RowChanging != null)) {
                    this.款式销售分析RowChanging(this, new 款式销售分析RowChangeEvent(((款式销售分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.款式销售分析RowDeleted != null)) {
                    this.款式销售分析RowDeleted(this, new 款式销售分析RowChangeEvent(((款式销售分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.款式销售分析RowDeleting != null)) {
                    this.款式销售分析RowDeleting(this, new 款式销售分析RowChangeEvent(((款式销售分析Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove款式销售分析Row(款式销售分析Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "款式销售分析DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 款式销售分析详细DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTM;
            
            private global::System.Data.DataColumn columnKUS;
            
            private global::System.Data.DataColumn columnSETTIME;
            
            private global::System.Data.DataColumn columnCBEI;
            
            private global::System.Data.DataColumn columnSSALE;
            
            private global::System.Data.DataColumn columnZKOU;
            
            private global::System.Data.DataColumn columnSLIANG;
            
            private global::System.Data.DataColumn columnKHU;
            
            private global::System.Data.DataColumn columnMDIAN;
            
            private global::System.Data.DataColumn columnUSER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细DataTable() {
                this.TableName = "款式销售分析详细";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 款式销售分析详细DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 款式销售分析详细DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TMColumn {
                get {
                    return this.columnTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KUSColumn {
                get {
                    return this.columnKUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SETTIMEColumn {
                get {
                    return this.columnSETTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CBEIColumn {
                get {
                    return this.columnCBEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSALEColumn {
                get {
                    return this.columnSSALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZKOUColumn {
                get {
                    return this.columnZKOU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SLIANGColumn {
                get {
                    return this.columnSLIANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KHUColumn {
                get {
                    return this.columnKHU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDIANColumn {
                get {
                    return this.columnMDIAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERColumn {
                get {
                    return this.columnUSER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细Row this[int index] {
                get {
                    return ((款式销售分析详细Row)(this.Rows[index]));
                }
            }
            
            public event 款式销售分析详细RowChangeEventHandler 款式销售分析详细RowChanging;
            
            public event 款式销售分析详细RowChangeEventHandler 款式销售分析详细RowChanged;
            
            public event 款式销售分析详细RowChangeEventHandler 款式销售分析详细RowDeleting;
            
            public event 款式销售分析详细RowChangeEventHandler 款式销售分析详细RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add款式销售分析详细Row(款式销售分析详细Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细Row Add款式销售分析详细Row(string TM, string KUS, string SETTIME, double CBEI, double SSALE, string ZKOU, short SLIANG, string KHU, string MDIAN, string USER) {
                款式销售分析详细Row row款式销售分析详细Row = ((款式销售分析详细Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TM,
                        KUS,
                        SETTIME,
                        CBEI,
                        SSALE,
                        ZKOU,
                        SLIANG,
                        KHU,
                        MDIAN,
                        USER};
                row款式销售分析详细Row.ItemArray = columnValuesArray;
                this.Rows.Add(row款式销售分析详细Row);
                return row款式销售分析详细Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                款式销售分析详细DataTable cln = ((款式销售分析详细DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 款式销售分析详细DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTM = base.Columns["TM"];
                this.columnKUS = base.Columns["KUS"];
                this.columnSETTIME = base.Columns["SETTIME"];
                this.columnCBEI = base.Columns["CBEI"];
                this.columnSSALE = base.Columns["SSALE"];
                this.columnZKOU = base.Columns["ZKOU"];
                this.columnSLIANG = base.Columns["SLIANG"];
                this.columnKHU = base.Columns["KHU"];
                this.columnMDIAN = base.Columns["MDIAN"];
                this.columnUSER = base.Columns["USER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTM = new global::System.Data.DataColumn("TM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTM);
                this.columnKUS = new global::System.Data.DataColumn("KUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKUS);
                this.columnSETTIME = new global::System.Data.DataColumn("SETTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSETTIME);
                this.columnCBEI = new global::System.Data.DataColumn("CBEI", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCBEI);
                this.columnSSALE = new global::System.Data.DataColumn("SSALE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSALE);
                this.columnZKOU = new global::System.Data.DataColumn("ZKOU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZKOU);
                this.columnSLIANG = new global::System.Data.DataColumn("SLIANG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIANG);
                this.columnKHU = new global::System.Data.DataColumn("KHU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKHU);
                this.columnMDIAN = new global::System.Data.DataColumn("MDIAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDIAN);
                this.columnUSER = new global::System.Data.DataColumn("USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细Row New款式销售分析详细Row() {
                return ((款式销售分析详细Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 款式销售分析详细Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(款式销售分析详细Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.款式销售分析详细RowChanged != null)) {
                    this.款式销售分析详细RowChanged(this, new 款式销售分析详细RowChangeEvent(((款式销售分析详细Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.款式销售分析详细RowChanging != null)) {
                    this.款式销售分析详细RowChanging(this, new 款式销售分析详细RowChangeEvent(((款式销售分析详细Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.款式销售分析详细RowDeleted != null)) {
                    this.款式销售分析详细RowDeleted(this, new 款式销售分析详细RowChangeEvent(((款式销售分析详细Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.款式销售分析详细RowDeleting != null)) {
                    this.款式销售分析详细RowDeleting(this, new 款式销售分析详细RowChangeEvent(((款式销售分析详细Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove款式销售分析详细Row(款式销售分析详细Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "款式销售分析详细DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class 门店发销退统计DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columna1;
            
            private global::System.Data.DataColumn columna2;
            
            private global::System.Data.DataColumn columna3;
            
            private global::System.Data.DataColumn columna4;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计DataTable() {
                this.TableName = "门店发销退统计";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店发销退统计DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected 门店发销退统计DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn a1Column {
                get {
                    return this.columna1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn a2Column {
                get {
                    return this.columna2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn a3Column {
                get {
                    return this.columna3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn a4Column {
                get {
                    return this.columna4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计Row this[int index] {
                get {
                    return ((门店发销退统计Row)(this.Rows[index]));
                }
            }
            
            public event 门店发销退统计RowChangeEventHandler 门店发销退统计RowChanging;
            
            public event 门店发销退统计RowChangeEventHandler 门店发销退统计RowChanged;
            
            public event 门店发销退统计RowChangeEventHandler 门店发销退统计RowDeleting;
            
            public event 门店发销退统计RowChangeEventHandler 门店发销退统计RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add门店发销退统计Row(门店发销退统计Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计Row Add门店发销退统计Row(string name, string a1, string a2, string a3, string a4) {
                门店发销退统计Row row门店发销退统计Row = ((门店发销退统计Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        a1,
                        a2,
                        a3,
                        a4};
                row门店发销退统计Row.ItemArray = columnValuesArray;
                this.Rows.Add(row门店发销退统计Row);
                return row门店发销退统计Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                门店发销退统计DataTable cln = ((门店发销退统计DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new 门店发销退统计DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columna1 = base.Columns["a1"];
                this.columna2 = base.Columns["a2"];
                this.columna3 = base.Columns["a3"];
                this.columna4 = base.Columns["a4"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columna1 = new global::System.Data.DataColumn("a1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna1);
                this.columna2 = new global::System.Data.DataColumn("a2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna2);
                this.columna3 = new global::System.Data.DataColumn("a3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna3);
                this.columna4 = new global::System.Data.DataColumn("a4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columna4);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计Row New门店发销退统计Row() {
                return ((门店发销退统计Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new 门店发销退统计Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(门店发销退统计Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.门店发销退统计RowChanged != null)) {
                    this.门店发销退统计RowChanged(this, new 门店发销退统计RowChangeEvent(((门店发销退统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.门店发销退统计RowChanging != null)) {
                    this.门店发销退统计RowChanging(this, new 门店发销退统计RowChangeEvent(((门店发销退统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.门店发销退统计RowDeleted != null)) {
                    this.门店发销退统计RowDeleted(this, new 门店发销退统计RowChangeEvent(((门店发销退统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.门店发销退统计RowDeleting != null)) {
                    this.门店发销退统计RowDeleting(this, new 门店发销退统计RowChangeEvent(((门店发销退统计Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove门店发销退统计Row(门店发销退统计Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                clidata ds = new clidata();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "门店发销退统计DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 地区Row : global::System.Data.DataRow {
            
            private 地区DataTable table地区;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 地区Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table地区 = ((地区DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.table地区.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“地区”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table地区.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table地区.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“地区”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table地区.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lv {
                get {
                    try {
                        return ((string)(this[this.table地区.lvColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“地区”中列“lv”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table地区.lvColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table地区.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table地区.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table地区.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table地区.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslvNull() {
                return this.IsNull(this.table地区.lvColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlvNull() {
                this[this.table地区.lvColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 客户Row : global::System.Data.DataRow {
            
            private 客户DataTable table客户;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 客户Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table客户 = ((客户DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.table客户.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xin {
                get {
                    try {
                        return ((string)(this[this.table客户.xinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“xin”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.xinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string min {
                get {
                    try {
                        return ((string)(this[this.table客户.minColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“min”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.minColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sji {
                get {
                    try {
                        return ((string)(this[this.table客户.sjiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“sji”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.sjiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xbie {
                get {
                    try {
                        return ((string)(this[this.table客户.xbieColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“xbie”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.xbieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nlin {
                get {
                    try {
                        return ((string)(this[this.table客户.nlinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“nlin”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.nlinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sri {
                get {
                    try {
                        return ((string)(this[this.table客户.sriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“sri”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.sriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.table客户.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“email”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusen {
                get {
                    try {
                        return ((string)(this[this.table客户.dqusenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“dqusen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.dqusenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusi {
                get {
                    try {
                        return ((string)(this[this.table客户.dqusiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“dqusi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.dqusiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dzhi {
                get {
                    try {
                        return ((string)(this[this.table客户.dzhiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“dzhi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.dzhiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ahao {
                get {
                    try {
                        return ((string)(this[this.table客户.ahaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“ahao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.ahaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zye {
                get {
                    try {
                        return ((string)(this[this.table客户.zyeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“zye”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.zyeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table客户.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string khuhao {
                get {
                    try {
                        return ((string)(this[this.table客户.khuhaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“khuhao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.khuhaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double zk {
                get {
                    try {
                        return ((double)(this[this.table客户.zkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户”中列“zk”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户.zkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table客户.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table客户.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxinNull() {
                return this.IsNull(this.table客户.xinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxinNull() {
                this[this.table客户.xinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsminNull() {
                return this.IsNull(this.table客户.minColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetminNull() {
                this[this.table客户.minColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssjiNull() {
                return this.IsNull(this.table客户.sjiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsjiNull() {
                this[this.table客户.sjiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxbieNull() {
                return this.IsNull(this.table客户.xbieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxbieNull() {
                this[this.table客户.xbieColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnlinNull() {
                return this.IsNull(this.table客户.nlinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnlinNull() {
                this[this.table客户.nlinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssriNull() {
                return this.IsNull(this.table客户.sriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsriNull() {
                this[this.table客户.sriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.table客户.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.table客户.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusenNull() {
                return this.IsNull(this.table客户.dqusenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusenNull() {
                this[this.table客户.dqusenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusiNull() {
                return this.IsNull(this.table客户.dqusiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusiNull() {
                this[this.table客户.dqusiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdzhiNull() {
                return this.IsNull(this.table客户.dzhiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdzhiNull() {
                this[this.table客户.dzhiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsahaoNull() {
                return this.IsNull(this.table客户.ahaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetahaoNull() {
                this[this.table客户.ahaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszyeNull() {
                return this.IsNull(this.table客户.zyeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzyeNull() {
                this[this.table客户.zyeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table客户.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table客户.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskhuhaoNull() {
                return this.IsNull(this.table客户.khuhaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkhuhaoNull() {
                this[this.table客户.khuhaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszkNull() {
                return this.IsNull(this.table客户.zkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzkNull() {
                this[this.table客户.zkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 供应商Row : global::System.Data.DataRow {
            
            private 供应商DataTable table供应商;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 供应商Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table供应商 = ((供应商DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.table供应商.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table供应商.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.table供应商.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“user”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tel {
                get {
                    try {
                        return ((string)(this[this.table供应商.telColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“tel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.telColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string czhen {
                get {
                    try {
                        return ((string)(this[this.table供应商.czhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“czhen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.czhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dzhi {
                get {
                    try {
                        return ((string)(this[this.table供应商.dzhiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“dzhi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.dzhiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.table供应商.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“email”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusen {
                get {
                    try {
                        return ((string)(this[this.table供应商.dqusenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“dqusen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.dqusenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusi {
                get {
                    try {
                        return ((string)(this[this.table供应商.dqusiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“dqusi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.dqusiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.table供应商.timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商”中列“time”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商.timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table供应商.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table供应商.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table供应商.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table供应商.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.table供应商.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.table供应商.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstelNull() {
                return this.IsNull(this.table供应商.telColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettelNull() {
                this[this.table供应商.telColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsczhenNull() {
                return this.IsNull(this.table供应商.czhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetczhenNull() {
                this[this.table供应商.czhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdzhiNull() {
                return this.IsNull(this.table供应商.dzhiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdzhiNull() {
                this[this.table供应商.dzhiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.table供应商.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.table供应商.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusenNull() {
                return this.IsNull(this.table供应商.dqusenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusenNull() {
                this[this.table供应商.dqusenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusiNull() {
                return this.IsNull(this.table供应商.dqusiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusiNull() {
                this[this.table供应商.dqusiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.table供应商.timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.table供应商.timeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门店Row : global::System.Data.DataRow {
            
            private 门店DataTable table门店;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门店 = ((门店DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.table门店.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table门店.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.table门店.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“user”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tel {
                get {
                    try {
                        return ((string)(this[this.table门店.telColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“tel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.telColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string czhen {
                get {
                    try {
                        return ((string)(this[this.table门店.czhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“czhen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.czhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dzhi {
                get {
                    try {
                        return ((string)(this[this.table门店.dzhiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“dzhi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.dzhiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.table门店.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“email”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusen {
                get {
                    try {
                        return ((string)(this[this.table门店.dqusenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“dqusen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.dqusenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusi {
                get {
                    try {
                        return ((string)(this[this.table门店.dqusiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店”中列“dqusi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店.dqusiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table门店.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table门店.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table门店.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table门店.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.table门店.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.table门店.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstelNull() {
                return this.IsNull(this.table门店.telColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettelNull() {
                this[this.table门店.telColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsczhenNull() {
                return this.IsNull(this.table门店.czhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetczhenNull() {
                this[this.table门店.czhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdzhiNull() {
                return this.IsNull(this.table门店.dzhiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdzhiNull() {
                this[this.table门店.dzhiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.table门店.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.table门店.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusenNull() {
                return this.IsNull(this.table门店.dqusenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusenNull() {
                this[this.table门店.dqusenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusiNull() {
                return this.IsNull(this.table门店.dqusiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusiNull() {
                this[this.table门店.dqusiColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 员工Row : global::System.Data.DataRow {
            
            private 员工DataTable table员工;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table员工 = ((员工DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.table员工.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sid {
                get {
                    try {
                        return ((string)(this[this.table员工.sidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“sid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.sidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table员工.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pwd {
                get {
                    try {
                        return ((string)(this[this.table员工.pwdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“pwd”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.pwdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tel {
                get {
                    try {
                        return ((string)(this[this.table员工.telColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“tel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.telColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusen {
                get {
                    try {
                        return ((string)(this[this.table员工.dqusenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“dqusen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.dqusenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dqusi {
                get {
                    try {
                        return ((string)(this[this.table员工.dqusiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“dqusi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.dqusiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jguan {
                get {
                    try {
                        return ((string)(this[this.table员工.jguanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“jguan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.jguanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xbie {
                get {
                    try {
                        return ((string)(this[this.table员工.xbieColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“xbie”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.xbieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mdian {
                get {
                    try {
                        return ((string)(this[this.table员工.mdianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“mdian”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.mdianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.table员工.timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“time”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sfzhen {
                get {
                    try {
                        return ((string)(this[this.table员工.sfzhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工”中列“sfzhen”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工.sfzhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table员工.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table员工.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssidNull() {
                return this.IsNull(this.table员工.sidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsidNull() {
                this[this.table员工.sidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table员工.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table员工.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspwdNull() {
                return this.IsNull(this.table员工.pwdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpwdNull() {
                this[this.table员工.pwdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstelNull() {
                return this.IsNull(this.table员工.telColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettelNull() {
                this[this.table员工.telColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusenNull() {
                return this.IsNull(this.table员工.dqusenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusenNull() {
                this[this.table员工.dqusenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdqusiNull() {
                return this.IsNull(this.table员工.dqusiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdqusiNull() {
                this[this.table员工.dqusiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjguanNull() {
                return this.IsNull(this.table员工.jguanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjguanNull() {
                this[this.table员工.jguanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxbieNull() {
                return this.IsNull(this.table员工.xbieColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxbieNull() {
                this[this.table员工.xbieColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmdianNull() {
                return this.IsNull(this.table员工.mdianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmdianNull() {
                this[this.table员工.mdianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.table员工.timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.table员工.timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssfzhenNull() {
                return this.IsNull(this.table员工.sfzhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsfzhenNull() {
                this[this.table员工.sfzhenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 金料Row : global::System.Data.DataRow {
            
            private 金料DataTable table金料;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 金料Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table金料 = ((金料DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table金料.nameColumn]));
                }
                set {
                    this[this.table金料.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 石料Row : global::System.Data.DataRow {
            
            private 石料DataTable table石料;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 石料Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table石料 = ((石料DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table石料.nameColumn]));
                }
                set {
                    this[this.table石料.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 首饰Row : global::System.Data.DataRow {
            
            private 首饰DataTable table首饰;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 首饰Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table首饰 = ((首饰DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table首饰.nameColumn]));
                }
                set {
                    this[this.table首饰.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 净度Row : global::System.Data.DataRow {
            
            private 净度DataTable table净度;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 净度Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table净度 = ((净度DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table净度.nameColumn]));
                }
                set {
                    this[this.table净度.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 单位Row : global::System.Data.DataRow {
            
            private 单位DataTable table单位;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 单位Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table单位 = ((单位DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table单位.nameColumn]));
                }
                set {
                    this[this.table单位.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 仓库Row : global::System.Data.DataRow {
            
            private 仓库DataTable table仓库;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 仓库Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table仓库 = ((仓库DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table仓库.nameColumn]));
                }
                set {
                    this[this.table仓库.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class goodsRow : global::System.Data.DataRow {
            
            private goodsDataTable tablegoods;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal goodsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegoods = ((goodsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tablegoods.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tm {
                get {
                    return ((string)(this[this.tablegoods.tmColumn]));
                }
                set {
                    this[this.tablegoods.tmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jliao {
                get {
                    try {
                        return ((string)(this[this.tablegoods.jliaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jliao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jliaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sliao {
                get {
                    try {
                        return ((string)(this[this.tablegoods.sliaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“sliao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.sliaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ssi {
                get {
                    try {
                        return ((string)(this[this.tablegoods.ssiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“ssi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.ssiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string qkou {
                get {
                    try {
                        return ((string)(this[this.tablegoods.qkouColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“qkou”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.qkouColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zshu {
                get {
                    try {
                        return ((string)(this[this.tablegoods.zshuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zshu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zshuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kus {
                get {
                    try {
                        return ((string)(this[this.tablegoods.kusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“kus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.kusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hhao {
                get {
                    try {
                        return ((string)(this[this.tablegoods.hhaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“hhao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.hhaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dwei {
                get {
                    try {
                        return ((string)(this[this.tablegoods.dweiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“dwei”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.dweiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sliang {
                get {
                    try {
                        return ((int)(this[this.tablegoods.sliangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“sliang”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.sliangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double jianz {
                get {
                    try {
                        return ((double)(this[this.tablegoods.jianzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jianz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jianzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double jinz {
                get {
                    try {
                        return ((double)(this[this.tablegoods.jinzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jinz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jinzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double pjianz {
                get {
                    try {
                        return ((double)(this[this.tablegoods.pjianzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“pjianz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.pjianzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double blu {
                get {
                    try {
                        return ((double)(this[this.tablegoods.bluColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“blu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.bluColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double zsz {
                get {
                    try {
                        return ((double)(this[this.tablegoods.zszColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zsz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zszColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zss {
                get {
                    try {
                        return ((int)(this[this.tablegoods.zssColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zss”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zssColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fsz {
                get {
                    try {
                        return ((double)(this[this.tablegoods.fszColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“fsz”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.fszColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fss {
                get {
                    try {
                        return ((int)(this[this.tablegoods.fssColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“fss”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.fssColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cbei {
                get {
                    try {
                        return ((double)(this[this.tablegoods.cbeiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“cbei”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.cbeiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double xsou {
                get {
                    try {
                        return ((double)(this[this.tablegoods.xsouColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“xsou”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.xsouColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bzhu {
                get {
                    try {
                        return ((string)(this[this.tablegoods.bzhuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“bzhu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.bzhuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool slbol {
                get {
                    try {
                        return ((bool)(this[this.tablegoods.slbolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“slbol”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.slbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool imgbol {
                get {
                    try {
                        return ((bool)(this[this.tablegoods.imgbolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“imgbol”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.imgbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablegoods.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zshi {
                get {
                    try {
                        return ((string)(this[this.tablegoods.zshiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zshi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zshiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fshi {
                get {
                    try {
                        return ((string)(this[this.tablegoods.fshiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“fshi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.fshiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yse {
                get {
                    try {
                        return ((string)(this[this.tablegoods.yseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“yse”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.yseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xzuang {
                get {
                    try {
                        return ((string)(this[this.tablegoods.xzuangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“xzuang”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.xzuangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string qgong {
                get {
                    try {
                        return ((string)(this[this.tablegoods.qgongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“qgong”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.qgongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jdu {
                get {
                    try {
                        return ((string)(this[this.tablegoods.jduColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jdu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jduColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jja {
                get {
                    try {
                        return ((string)(this[this.tablegoods.jjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jja”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pjja {
                get {
                    try {
                        return ((string)(this[this.tablegoods.pjjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“pjja”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.pjjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zsja {
                get {
                    try {
                        return ((string)(this[this.tablegoods.zsjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zsja”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zsjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zsje {
                get {
                    try {
                        return ((string)(this[this.tablegoods.zsjeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“zsje”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.zsjeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fsja {
                get {
                    try {
                        return ((string)(this[this.tablegoods.fsjaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“fsja”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.fsjaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fsje {
                get {
                    try {
                        return ((string)(this[this.tablegoods.fsjeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“fsje”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.fsjeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jgdj {
                get {
                    try {
                        return ((string)(this[this.tablegoods.jgdjColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jgdj”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jgdjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string other {
                get {
                    try {
                        return ((string)(this[this.tablegoods.otherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“other”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.otherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jgsh {
                get {
                    try {
                        return ((string)(this[this.tablegoods.jgshColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jgsh”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jgshColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int theID {
                get {
                    try {
                        return ((int)(this[this.tablegoods.theIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“theID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.theIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double jies {
                get {
                    try {
                        return ((double)(this[this.tablegoods.jiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“goods”中列“jies”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablegoods.jiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablegoods.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablegoods.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjliaoNull() {
                return this.IsNull(this.tablegoods.jliaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjliaoNull() {
                this[this.tablegoods.jliaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssliaoNull() {
                return this.IsNull(this.tablegoods.sliaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsliaoNull() {
                this[this.tablegoods.sliaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsssiNull() {
                return this.IsNull(this.tablegoods.ssiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetssiNull() {
                this[this.tablegoods.ssiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqkouNull() {
                return this.IsNull(this.tablegoods.qkouColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqkouNull() {
                this[this.tablegoods.qkouColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszshuNull() {
                return this.IsNull(this.tablegoods.zshuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzshuNull() {
                this[this.tablegoods.zshuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskusNull() {
                return this.IsNull(this.tablegoods.kusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkusNull() {
                this[this.tablegoods.kusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshhaoNull() {
                return this.IsNull(this.tablegoods.hhaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethhaoNull() {
                this[this.tablegoods.hhaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdweiNull() {
                return this.IsNull(this.tablegoods.dweiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdweiNull() {
                this[this.tablegoods.dweiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssliangNull() {
                return this.IsNull(this.tablegoods.sliangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsliangNull() {
                this[this.tablegoods.sliangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjianzNull() {
                return this.IsNull(this.tablegoods.jianzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjianzNull() {
                this[this.tablegoods.jianzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjinzNull() {
                return this.IsNull(this.tablegoods.jinzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjinzNull() {
                this[this.tablegoods.jinzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspjianzNull() {
                return this.IsNull(this.tablegoods.pjianzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpjianzNull() {
                this[this.tablegoods.pjianzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbluNull() {
                return this.IsNull(this.tablegoods.bluColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbluNull() {
                this[this.tablegoods.bluColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszszNull() {
                return this.IsNull(this.tablegoods.zszColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzszNull() {
                this[this.tablegoods.zszColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszssNull() {
                return this.IsNull(this.tablegoods.zssColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzssNull() {
                this[this.tablegoods.zssColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfszNull() {
                return this.IsNull(this.tablegoods.fszColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfszNull() {
                this[this.tablegoods.fszColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfssNull() {
                return this.IsNull(this.tablegoods.fssColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfssNull() {
                this[this.tablegoods.fssColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscbeiNull() {
                return this.IsNull(this.tablegoods.cbeiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcbeiNull() {
                this[this.tablegoods.cbeiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxsouNull() {
                return this.IsNull(this.tablegoods.xsouColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxsouNull() {
                this[this.tablegoods.xsouColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbzhuNull() {
                return this.IsNull(this.tablegoods.bzhuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbzhuNull() {
                this[this.tablegoods.bzhuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsslbolNull() {
                return this.IsNull(this.tablegoods.slbolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetslbolNull() {
                this[this.tablegoods.slbolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimgbolNull() {
                return this.IsNull(this.tablegoods.imgbolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimgbolNull() {
                this[this.tablegoods.imgbolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablegoods.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablegoods.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszshiNull() {
                return this.IsNull(this.tablegoods.zshiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzshiNull() {
                this[this.tablegoods.zshiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfshiNull() {
                return this.IsNull(this.tablegoods.fshiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfshiNull() {
                this[this.tablegoods.fshiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyseNull() {
                return this.IsNull(this.tablegoods.yseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyseNull() {
                this[this.tablegoods.yseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxzuangNull() {
                return this.IsNull(this.tablegoods.xzuangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxzuangNull() {
                this[this.tablegoods.xzuangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqgongNull() {
                return this.IsNull(this.tablegoods.qgongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqgongNull() {
                this[this.tablegoods.qgongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjduNull() {
                return this.IsNull(this.tablegoods.jduColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjduNull() {
                this[this.tablegoods.jduColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjjaNull() {
                return this.IsNull(this.tablegoods.jjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjjaNull() {
                this[this.tablegoods.jjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspjjaNull() {
                return this.IsNull(this.tablegoods.pjjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpjjaNull() {
                this[this.tablegoods.pjjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszsjaNull() {
                return this.IsNull(this.tablegoods.zsjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzsjaNull() {
                this[this.tablegoods.zsjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszsjeNull() {
                return this.IsNull(this.tablegoods.zsjeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzsjeNull() {
                this[this.tablegoods.zsjeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfsjaNull() {
                return this.IsNull(this.tablegoods.fsjaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfsjaNull() {
                this[this.tablegoods.fsjaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfsjeNull() {
                return this.IsNull(this.tablegoods.fsjeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfsjeNull() {
                this[this.tablegoods.fsjeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjgdjNull() {
                return this.IsNull(this.tablegoods.jgdjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjgdjNull() {
                this[this.tablegoods.jgdjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsotherNull() {
                return this.IsNull(this.tablegoods.otherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetotherNull() {
                this[this.tablegoods.otherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjgshNull() {
                return this.IsNull(this.tablegoods.jgshColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjgshNull() {
                this[this.tablegoods.jgshColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstheIDNull() {
                return this.IsNull(this.tablegoods.theIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettheIDNull() {
                this[this.tablegoods.theIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjiesNull() {
                return this.IsNull(this.tablegoods.jiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjiesNull() {
                this[this.tablegoods.jiesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class stongRow : global::System.Data.DataRow {
            
            private stongDataTable tablestong;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stongRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestong = ((stongDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cliid {
                get {
                    try {
                        return ((string)(this[this.tablestong.cliidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“cliid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.cliidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zfshi {
                get {
                    try {
                        return ((string)(this[this.tablestong.zfshiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“zfshi”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.zfshiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablestong.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort sliang {
                get {
                    try {
                        return ((ushort)(this[this.tablestong.sliangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“sliang”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.sliangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zliang {
                get {
                    try {
                        return ((decimal)(this[this.tablestong.zliangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“zliang”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.zliangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xzuang {
                get {
                    try {
                        return ((string)(this[this.tablestong.xzuangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“xzuang”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.xzuangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string jdu {
                get {
                    try {
                        return ((string)(this[this.tablestong.jduColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“jdu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.jduColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string qig {
                get {
                    try {
                        return ((string)(this[this.tablestong.qigColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“stong”中列“qig”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestong.qigColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscliidNull() {
                return this.IsNull(this.tablestong.cliidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcliidNull() {
                this[this.tablestong.cliidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszfshiNull() {
                return this.IsNull(this.tablestong.zfshiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzfshiNull() {
                this[this.tablestong.zfshiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablestong.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablestong.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssliangNull() {
                return this.IsNull(this.tablestong.sliangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsliangNull() {
                this[this.tablestong.sliangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszliangNull() {
                return this.IsNull(this.tablestong.zliangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzliangNull() {
                this[this.tablestong.zliangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxzuangNull() {
                return this.IsNull(this.tablestong.xzuangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxzuangNull() {
                this[this.tablestong.xzuangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsjduNull() {
                return this.IsNull(this.tablestong.jduColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetjduNull() {
                this[this.tablestong.jduColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqigNull() {
                return this.IsNull(this.tablestong.qigColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqigNull() {
                this[this.tablestong.qigColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 形状Row : global::System.Data.DataRow {
            
            private 形状DataTable table形状;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 形状Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table形状 = ((形状DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table形状.nameColumn]));
                }
                set {
                    this[this.table形状.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 切工Row : global::System.Data.DataRow {
            
            private 切工DataTable table切工;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 切工Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table切工 = ((切工DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table切工.nameColumn]));
                }
                set {
                    this[this.table切工.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 金汇分销单Row : global::System.Data.DataRow {
            
            private 金汇分销单DataTable table金汇分销单;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 金汇分销单Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table金汇分销单 = ((金汇分销单DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no {
                get {
                    try {
                        return ((string)(this[this.table金汇分销单.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“金汇分销单”中列“no”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table金汇分销单.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string quan {
                get {
                    try {
                        return ((string)(this[this.table金汇分销单.quanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“金汇分销单”中列“quan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table金汇分销单.quanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.table金汇分销单.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“金汇分销单”中列“date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table金汇分销单.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string site {
                get {
                    try {
                        return ((string)(this[this.table金汇分销单.siteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“金汇分销单”中列“site”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table金汇分销单.siteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _operator {
                get {
                    try {
                        return ((string)(this[this.table金汇分销单.operatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“金汇分销单”中列“operator”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table金汇分销单.operatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.table金汇分销单.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.table金汇分销单.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsquanNull() {
                return this.IsNull(this.table金汇分销单.quanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetquanNull() {
                this[this.table金汇分销单.quanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.table金汇分销单.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.table金汇分销单.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssiteNull() {
                return this.IsNull(this.table金汇分销单.siteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsiteNull() {
                this[this.table金汇分销单.siteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_operatorNull() {
                return this.IsNull(this.table金汇分销单.operatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_operatorNull() {
                this[this.table金汇分销单.operatorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 颜色Row : global::System.Data.DataRow {
            
            private 颜色DataTable table颜色;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 颜色Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table颜色 = ((颜色DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.table颜色.nameColumn]));
                }
                set {
                    this[this.table颜色.nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 入库单列表Row : global::System.Data.DataRow {
            
            private 入库单列表DataTable table入库单列表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 入库单列表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table入库单列表 = ((入库单列表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xTime {
                get {
                    try {
                        return ((string)(this[this.table入库单列表.xTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“入库单列表”中列“xTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table入库单列表.xTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    return ((string)(this[this.table入库单列表.DHColumn]));
                }
                set {
                    this[this.table入库单列表.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SL {
                get {
                    try {
                        return ((string)(this[this.table入库单列表.SLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“入库单列表”中列“SL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table入库单列表.SLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table入库单列表.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“入库单列表”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table入库单列表.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table入库单列表.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“入库单列表”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table入库单列表.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxTimeNull() {
                return this.IsNull(this.table入库单列表.xTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxTimeNull() {
                this[this.table入库单列表.xTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLNull() {
                return this.IsNull(this.table入库单列表.SLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLNull() {
                this[this.table入库单列表.SLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table入库单列表.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table入库单列表.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table入库单列表.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table入库单列表.IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 产品状态Row : global::System.Data.DataRow {
            
            private 产品状态DataTable table产品状态;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 产品状态Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table产品状态 = ((产品状态DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xTime {
                get {
                    try {
                        return ((string)(this[this.table产品状态.xTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“xTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.xTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tm {
                get {
                    try {
                        return ((string)(this[this.table产品状态.tmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“tm”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.tmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.table产品状态.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“user”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stat {
                get {
                    try {
                        return ((string)(this[this.table产品状态.statColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.statColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mdian {
                get {
                    try {
                        return ((string)(this[this.table产品状态.mdianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“mdian”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.mdianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mdianuser {
                get {
                    try {
                        return ((string)(this[this.table产品状态.mdianuserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“mdianuser”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.mdianuserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sj {
                get {
                    try {
                        return ((string)(this[this.table产品状态.sjColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“sj”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.sjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ssj {
                get {
                    try {
                        return ((string)(this[this.table产品状态.ssjColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“ssj”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.ssjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tj {
                get {
                    try {
                        return ((string)(this[this.table产品状态.tjColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“tj”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.tjColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    try {
                        return ((string)(this[this.table产品状态.DHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“DH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CBEI {
                get {
                    try {
                        return ((string)(this[this.table产品状态.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“产品状态”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table产品状态.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxTimeNull() {
                return this.IsNull(this.table产品状态.xTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxTimeNull() {
                this[this.table产品状态.xTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstmNull() {
                return this.IsNull(this.table产品状态.tmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettmNull() {
                this[this.table产品状态.tmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.table产品状态.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.table产品状态.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatNull() {
                return this.IsNull(this.table产品状态.statColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatNull() {
                this[this.table产品状态.statColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmdianNull() {
                return this.IsNull(this.table产品状态.mdianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmdianNull() {
                this[this.table产品状态.mdianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmdianuserNull() {
                return this.IsNull(this.table产品状态.mdianuserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmdianuserNull() {
                this[this.table产品状态.mdianuserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssjNull() {
                return this.IsNull(this.table产品状态.sjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsjNull() {
                this[this.table产品状态.sjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsssjNull() {
                return this.IsNull(this.table产品状态.ssjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetssjNull() {
                this[this.table产品状态.ssjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstjNull() {
                return this.IsNull(this.table产品状态.tjColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettjNull() {
                this[this.table产品状态.tjColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDHNull() {
                return this.IsNull(this.table产品状态.DHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDHNull() {
                this[this.table产品状态.DHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table产品状态.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table产品状态.CBEIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 分销暂存Row : global::System.Data.DataRow {
            
            private 分销暂存DataTable table分销暂存;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 分销暂存Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table分销暂存 = ((分销暂存DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table分销暂存.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“分销暂存”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table分销暂存.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table分销暂存.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“分销暂存”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table分销暂存.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table分销暂存.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table分销暂存.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table分销暂存.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table分销暂存.USERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 发货单列表Row : global::System.Data.DataRow {
            
            private 发货单列表DataTable table发货单列表;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 发货单列表Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table发货单列表 = ((发货单列表DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xTime {
                get {
                    try {
                        return ((string)(this[this.table发货单列表.xTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“xTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.xTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    return ((string)(this[this.table发货单列表.DHColumn]));
                }
                set {
                    this[this.table发货单列表.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SL {
                get {
                    try {
                        return ((string)(this[this.table发货单列表.SLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“SL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.SLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table发货单列表.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIAN {
                get {
                    try {
                        return ((string)(this[this.table发货单列表.MDIANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“MDIAN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.MDIANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIANUSER {
                get {
                    try {
                        return ((string)(this[this.table发货单列表.MDIANUSERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“MDIANUSER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.MDIANUSERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table发货单列表.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“发货单列表”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table发货单列表.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxTimeNull() {
                return this.IsNull(this.table发货单列表.xTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxTimeNull() {
                this[this.table发货单列表.xTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLNull() {
                return this.IsNull(this.table发货单列表.SLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLNull() {
                this[this.table发货单列表.SLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table发货单列表.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table发货单列表.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANNull() {
                return this.IsNull(this.table发货单列表.MDIANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANNull() {
                this[this.table发货单列表.MDIANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANUSERNull() {
                return this.IsNull(this.table发货单列表.MDIANUSERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANUSERNull() {
                this[this.table发货单列表.MDIANUSERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table发货单列表.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table发货单列表.IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 员工STATRow : global::System.Data.DataRow {
            
            private 员工STATDataTable table员工STAT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工STATRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table员工STAT = ((员工STATDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    try {
                        return ((string)(this[this.table员工STAT.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工STAT”中列“UserID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工STAT.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserStat {
                get {
                    try {
                        return ((string)(this[this.table员工STAT.UserStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工STAT”中列“UserStat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工STAT.UserStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserZK {
                get {
                    try {
                        return ((string)(this[this.table员工STAT.UserZKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工STAT”中列“UserZK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工STAT.UserZKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.table员工STAT.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工STAT”中列“UserName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工STAT.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.table员工STAT.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.table员工STAT.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserStatNull() {
                return this.IsNull(this.table员工STAT.UserStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserStatNull() {
                this[this.table员工STAT.UserStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserZKNull() {
                return this.IsNull(this.table员工STAT.UserZKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserZKNull() {
                this[this.table员工STAT.UserZKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.table员工STAT.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.table员工STAT.UserNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 调成本价Row : global::System.Data.DataRow {
            
            private 调成本价DataTable table调成本价;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 调成本价Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table调成本价 = ((调成本价DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    return ((string)(this[this.table调成本价.TMColumn]));
                }
                set {
                    this[this.table调成本价.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table调成本价.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JJA {
                get {
                    try {
                        return ((double)(this[this.table调成本价.JJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“JJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.JJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PJJA {
                get {
                    try {
                        return ((double)(this[this.table调成本价.PJJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“PJJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.PJJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ZSJA {
                get {
                    try {
                        return ((double)(this[this.table调成本价.ZSJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“ZSJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.ZSJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ZSJE {
                get {
                    try {
                        return ((double)(this[this.table调成本价.ZSJEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“ZSJE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.ZSJEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FSJA {
                get {
                    try {
                        return ((double)(this[this.table调成本价.FSJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“FSJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.FSJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FSJE {
                get {
                    try {
                        return ((double)(this[this.table调成本价.FSJEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“FSJE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.FSJEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JGDJ {
                get {
                    try {
                        return ((double)(this[this.table调成本价.JGDJColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“JGDJ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.JGDJColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OTHER {
                get {
                    try {
                        return ((double)(this[this.table调成本价.OTHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“OTHER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.OTHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JGSH {
                get {
                    try {
                        return ((double)(this[this.table调成本价.JGSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“JGSH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.JGSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ZSS {
                get {
                    try {
                        return ((double)(this[this.table调成本价.ZSSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“ZSS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.ZSSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ZSZ {
                get {
                    try {
                        return ((double)(this[this.table调成本价.ZSZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“ZSZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.ZSZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FSS {
                get {
                    try {
                        return ((double)(this[this.table调成本价.FSSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“FSS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.FSSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FSZ {
                get {
                    try {
                        return ((double)(this[this.table调成本价.FSZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“FSZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.FSZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JLIAO {
                get {
                    try {
                        return ((string)(this[this.table调成本价.JLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“JLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.JLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLIAO {
                get {
                    try {
                        return ((string)(this[this.table调成本价.SLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“SLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.SLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSI {
                get {
                    try {
                        return ((string)(this[this.table调成本价.SSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“SSI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.SSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSHI {
                get {
                    try {
                        return ((string)(this[this.table调成本价.ZSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“ZSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.ZSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSHI {
                get {
                    try {
                        return ((string)(this[this.table调成本价.FSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“FSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.FSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CBEI {
                get {
                    try {
                        return ((double)(this[this.table调成本价.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JINZ {
                get {
                    try {
                        return ((double)(this[this.table调成本价.JINZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调成本价”中列“JINZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调成本价.JINZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table调成本价.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table调成本价.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJJANull() {
                return this.IsNull(this.table调成本价.JJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJJANull() {
                this[this.table调成本价.JJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPJJANull() {
                return this.IsNull(this.table调成本价.PJJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPJJANull() {
                this[this.table调成本价.PJJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSJANull() {
                return this.IsNull(this.table调成本价.ZSJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSJANull() {
                this[this.table调成本价.ZSJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSJENull() {
                return this.IsNull(this.table调成本价.ZSJEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSJENull() {
                this[this.table调成本价.ZSJEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSJANull() {
                return this.IsNull(this.table调成本价.FSJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSJANull() {
                this[this.table调成本价.FSJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSJENull() {
                return this.IsNull(this.table调成本价.FSJEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSJENull() {
                this[this.table调成本价.FSJEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJGDJNull() {
                return this.IsNull(this.table调成本价.JGDJColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJGDJNull() {
                this[this.table调成本价.JGDJColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTHERNull() {
                return this.IsNull(this.table调成本价.OTHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTHERNull() {
                this[this.table调成本价.OTHERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJGSHNull() {
                return this.IsNull(this.table调成本价.JGSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJGSHNull() {
                this[this.table调成本价.JGSHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSSNull() {
                return this.IsNull(this.table调成本价.ZSSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSSNull() {
                this[this.table调成本价.ZSSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSZNull() {
                return this.IsNull(this.table调成本价.ZSZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSZNull() {
                this[this.table调成本价.ZSZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSSNull() {
                return this.IsNull(this.table调成本价.FSSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSSNull() {
                this[this.table调成本价.FSSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSZNull() {
                return this.IsNull(this.table调成本价.FSZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSZNull() {
                this[this.table调成本价.FSZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJLIAONull() {
                return this.IsNull(this.table调成本价.JLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJLIAONull() {
                this[this.table调成本价.JLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIAONull() {
                return this.IsNull(this.table调成本价.SLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIAONull() {
                this[this.table调成本价.SLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSINull() {
                return this.IsNull(this.table调成本价.SSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSINull() {
                this[this.table调成本价.SSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSHINull() {
                return this.IsNull(this.table调成本价.ZSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSHINull() {
                this[this.table调成本价.ZSHIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSHINull() {
                return this.IsNull(this.table调成本价.FSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSHINull() {
                this[this.table调成本价.FSHIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table调成本价.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table调成本价.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJINZNull() {
                return this.IsNull(this.table调成本价.JINZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJINZNull() {
                this[this.table调成本价.JINZColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 成本查询Row : global::System.Data.DataRow {
            
            private 成本查询DataTable table成本查询;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 成本查询Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table成本查询 = ((成本查询DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    try {
                        return ((string)(this[this.table成本查询.TMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“TM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CBEI {
                get {
                    try {
                        return ((string)(this[this.table成本查询.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETDATE {
                get {
                    try {
                        return ((string)(this[this.table成本查询.SETDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“SETDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.SETDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table成本查询.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAT {
                get {
                    try {
                        return ((string)(this[this.table成本查询.STATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“STAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.STATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JJA {
                get {
                    try {
                        return ((string)(this[this.table成本查询.JJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“JJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.JJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PJJA {
                get {
                    try {
                        return ((string)(this[this.table成本查询.PJJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“PJJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.PJJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSJA {
                get {
                    try {
                        return ((string)(this[this.table成本查询.ZSJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“ZSJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.ZSJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSJE {
                get {
                    try {
                        return ((string)(this[this.table成本查询.ZSJEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“ZSJE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.ZSJEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSJA {
                get {
                    try {
                        return ((string)(this[this.table成本查询.FSJAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“FSJA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.FSJAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSJE {
                get {
                    try {
                        return ((string)(this[this.table成本查询.FSJEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“FSJE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.FSJEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JGDJ {
                get {
                    try {
                        return ((string)(this[this.table成本查询.JGDJColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“JGDJ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.JGDJColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OTHER {
                get {
                    try {
                        return ((string)(this[this.table成本查询.OTHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“OTHER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.OTHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JGSH {
                get {
                    try {
                        return ((string)(this[this.table成本查询.JGSHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“JGSH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.JGSHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSHI {
                get {
                    try {
                        return ((string)(this[this.table成本查询.ZSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“ZSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.ZSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSHI {
                get {
                    try {
                        return ((string)(this[this.table成本查询.FSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“成本查询”中列“FSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table成本查询.FSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMNull() {
                return this.IsNull(this.table成本查询.TMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMNull() {
                this[this.table成本查询.TMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table成本查询.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table成本查询.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETDATENull() {
                return this.IsNull(this.table成本查询.SETDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETDATENull() {
                this[this.table成本查询.SETDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table成本查询.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table成本查询.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATNull() {
                return this.IsNull(this.table成本查询.STATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATNull() {
                this[this.table成本查询.STATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJJANull() {
                return this.IsNull(this.table成本查询.JJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJJANull() {
                this[this.table成本查询.JJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPJJANull() {
                return this.IsNull(this.table成本查询.PJJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPJJANull() {
                this[this.table成本查询.PJJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSJANull() {
                return this.IsNull(this.table成本查询.ZSJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSJANull() {
                this[this.table成本查询.ZSJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSJENull() {
                return this.IsNull(this.table成本查询.ZSJEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSJENull() {
                this[this.table成本查询.ZSJEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSJANull() {
                return this.IsNull(this.table成本查询.FSJAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSJANull() {
                this[this.table成本查询.FSJAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSJENull() {
                return this.IsNull(this.table成本查询.FSJEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSJENull() {
                this[this.table成本查询.FSJEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJGDJNull() {
                return this.IsNull(this.table成本查询.JGDJColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJGDJNull() {
                this[this.table成本查询.JGDJColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTHERNull() {
                return this.IsNull(this.table成本查询.OTHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTHERNull() {
                this[this.table成本查询.OTHERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJGSHNull() {
                return this.IsNull(this.table成本查询.JGSHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJGSHNull() {
                this[this.table成本查询.JGSHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSHINull() {
                return this.IsNull(this.table成本查询.ZSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSHINull() {
                this[this.table成本查询.ZSHIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSHINull() {
                return this.IsNull(this.table成本查询.FSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSHINull() {
                this[this.table成本查询.FSHIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 调销售价Row : global::System.Data.DataRow {
            
            private 调销售价DataTable table调销售价;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 调销售价Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table调销售价 = ((调销售价DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    try {
                        return ((string)(this[this.table调销售价.DHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“DH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    return ((string)(this[this.table调销售价.TMColumn]));
                }
                set {
                    this[this.table调销售价.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MONY {
                get {
                    try {
                        return ((double)(this[this.table调销售价.MONYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“MONY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.MONYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETDATE {
                get {
                    try {
                        return ((string)(this[this.table调销售价.SETDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“SETDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.SETDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table调销售价.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAT {
                get {
                    try {
                        return ((string)(this[this.table调销售价.STATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“STAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.STATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BLU {
                get {
                    try {
                        return ((double)(this[this.table调销售价.BLUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“BLU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.BLUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CBEI {
                get {
                    try {
                        return ((double)(this[this.table调销售价.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLIAO {
                get {
                    try {
                        return ((string)(this[this.table调销售价.SLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“SLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.SLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JLIAO {
                get {
                    try {
                        return ((string)(this[this.table调销售价.JLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“JLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.JLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSI {
                get {
                    try {
                        return ((string)(this[this.table调销售价.SSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“SSI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.SSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IMGBOL {
                get {
                    try {
                        return ((bool)(this[this.table调销售价.IMGBOLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“IMGBOL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.IMGBOLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table调销售价.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BZHU {
                get {
                    try {
                        return ((string)(this[this.table调销售价.BZHUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“调销售价”中列“BZHU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table调销售价.BZHUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDHNull() {
                return this.IsNull(this.table调销售价.DHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDHNull() {
                this[this.table调销售价.DHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMONYNull() {
                return this.IsNull(this.table调销售价.MONYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMONYNull() {
                this[this.table调销售价.MONYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETDATENull() {
                return this.IsNull(this.table调销售价.SETDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETDATENull() {
                this[this.table调销售价.SETDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table调销售价.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table调销售价.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATNull() {
                return this.IsNull(this.table调销售价.STATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATNull() {
                this[this.table调销售价.STATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLUNull() {
                return this.IsNull(this.table调销售价.BLUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLUNull() {
                this[this.table调销售价.BLUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table调销售价.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table调销售价.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIAONull() {
                return this.IsNull(this.table调销售价.SLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIAONull() {
                this[this.table调销售价.SLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJLIAONull() {
                return this.IsNull(this.table调销售价.JLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJLIAONull() {
                this[this.table调销售价.JLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSINull() {
                return this.IsNull(this.table调销售价.SSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSINull() {
                this[this.table调销售价.SSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMGBOLNull() {
                return this.IsNull(this.table调销售价.IMGBOLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMGBOLNull() {
                this[this.table调销售价.IMGBOLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table调销售价.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table调销售价.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBZHUNull() {
                return this.IsNull(this.table调销售价.BZHUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBZHUNull() {
                this[this.table调销售价.BZHUColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 售价调价记录Row : global::System.Data.DataRow {
            
            private 售价调价记录DataTable table售价调价记录;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 售价调价记录Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table售价调价记录 = ((售价调价记录DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.DHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“DH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.TMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“TM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MONY {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.MONYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“MONY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.MONYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETDATE {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.SETDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“SETDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.SETDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAT {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.STATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“STAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.STATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLU {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.BLUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“BLU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.BLUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CBEI {
                get {
                    try {
                        return ((string)(this[this.table售价调价记录.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table售价调价记录.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“售价调价记录”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table售价调价记录.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDHNull() {
                return this.IsNull(this.table售价调价记录.DHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDHNull() {
                this[this.table售价调价记录.DHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMNull() {
                return this.IsNull(this.table售价调价记录.TMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMNull() {
                this[this.table售价调价记录.TMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMONYNull() {
                return this.IsNull(this.table售价调价记录.MONYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMONYNull() {
                this[this.table售价调价记录.MONYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETDATENull() {
                return this.IsNull(this.table售价调价记录.SETDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETDATENull() {
                this[this.table售价调价记录.SETDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table售价调价记录.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table售价调价记录.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATNull() {
                return this.IsNull(this.table售价调价记录.STATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATNull() {
                this[this.table售价调价记录.STATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLUNull() {
                return this.IsNull(this.table售价调价记录.BLUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLUNull() {
                this[this.table售价调价记录.BLUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table售价调价记录.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table售价调价记录.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table售价调价记录.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table售价调价记录.IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门店退货Row : global::System.Data.DataRow {
            
            private 门店退货DataTable table门店退货;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店退货Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门店退货 = ((门店退货DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    try {
                        return ((string)(this[this.table门店退货.TMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“TM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETTIME {
                get {
                    try {
                        return ((string)(this[this.table门店退货.SETTIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“SETTIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.SETTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table门店退货.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIAN {
                get {
                    try {
                        return ((string)(this[this.table门店退货.MDIANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“MDIAN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.MDIANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLIANG {
                get {
                    try {
                        return ((string)(this[this.table门店退货.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SBM {
                get {
                    try {
                        return ((string)(this[this.table门店退货.SBMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“SBM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.SBMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    try {
                        return ((string)(this[this.table门店退货.DHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“DH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERS {
                get {
                    try {
                        return ((string)(this[this.table门店退货.USERSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“USERS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.USERSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table门店退货.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTXT {
                get {
                    try {
                        return ((string)(this[this.table门店退货.nTXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店退货”中列“nTXT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店退货.nTXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMNull() {
                return this.IsNull(this.table门店退货.TMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMNull() {
                this[this.table门店退货.TMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTIMENull() {
                return this.IsNull(this.table门店退货.SETTIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTIMENull() {
                this[this.table门店退货.SETTIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table门店退货.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table门店退货.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANNull() {
                return this.IsNull(this.table门店退货.MDIANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANNull() {
                this[this.table门店退货.MDIANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table门店退货.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table门店退货.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSBMNull() {
                return this.IsNull(this.table门店退货.SBMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSBMNull() {
                this[this.table门店退货.SBMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDHNull() {
                return this.IsNull(this.table门店退货.DHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDHNull() {
                this[this.table门店退货.DHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERSNull() {
                return this.IsNull(this.table门店退货.USERSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERSNull() {
                this[this.table门店退货.USERSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table门店退货.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table门店退货.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTXTNull() {
                return this.IsNull(this.table门店退货.nTXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTXTNull() {
                this[this.table门店退货.nTXTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 客户积分Row : global::System.Data.DataRow {
            
            private 客户积分DataTable table客户积分;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 客户积分Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table客户积分 = ((客户积分DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.table客户积分.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KHH {
                get {
                    try {
                        return ((string)(this[this.table客户积分.KHHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“KHH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.KHHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table客户积分.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XBIE {
                get {
                    try {
                        return ((string)(this[this.table客户积分.XBIEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“XBIE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.XBIEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRI {
                get {
                    try {
                        return ((string)(this[this.table客户积分.SRIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“SRI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.SRIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.table客户积分.EMAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“EMAIL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQUSEN {
                get {
                    try {
                        return ((string)(this[this.table客户积分.DQUSENColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“DQUSEN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.DQUSENColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DQUSI {
                get {
                    try {
                        return ((string)(this[this.table客户积分.DQUSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“DQUSI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.DQUSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SJI {
                get {
                    try {
                        return ((string)(this[this.table客户积分.SJIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“SJI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.SJIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JF {
                get {
                    try {
                        return ((int)(this[this.table客户积分.JFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“JF”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.JFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XIN {
                get {
                    try {
                        return ((string)(this[this.table客户积分.XINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“XIN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.XINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIN {
                get {
                    try {
                        return ((string)(this[this.table客户积分.MINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“客户积分”中列“MIN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table客户积分.MINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.table客户积分.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.table客户积分.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKHHNull() {
                return this.IsNull(this.table客户积分.KHHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKHHNull() {
                this[this.table客户积分.KHHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table客户积分.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table客户积分.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXBIENull() {
                return this.IsNull(this.table客户积分.XBIEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXBIENull() {
                this[this.table客户积分.XBIEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRINull() {
                return this.IsNull(this.table客户积分.SRIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRINull() {
                this[this.table客户积分.SRIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.table客户积分.EMAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.table客户积分.EMAILColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQUSENNull() {
                return this.IsNull(this.table客户积分.DQUSENColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQUSENNull() {
                this[this.table客户积分.DQUSENColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDQUSINull() {
                return this.IsNull(this.table客户积分.DQUSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDQUSINull() {
                this[this.table客户积分.DQUSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSJINull() {
                return this.IsNull(this.table客户积分.SJIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSJINull() {
                this[this.table客户积分.SJIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJFNull() {
                return this.IsNull(this.table客户积分.JFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJFNull() {
                this[this.table客户积分.JFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXINNull() {
                return this.IsNull(this.table客户积分.XINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXINNull() {
                this[this.table客户积分.XINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMINNull() {
                return this.IsNull(this.table客户积分.MINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMINNull() {
                this[this.table客户积分.MINColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 供应商进货分析Row : global::System.Data.DataRow {
            
            private 供应商进货分析DataTable table供应商进货分析;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 供应商进货分析Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table供应商进货分析 = ((供应商进货分析DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HELP {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.HELPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“HELP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.HELPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DH {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.DHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“DH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.DHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLIANG {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JIANZ {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.JIANZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“JIANZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.JIANZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JINZ {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.JINZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“JINZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.JINZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CBEI {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETTIME {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.SETTIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“SETTIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.SETTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table供应商进货分析.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“供应商进货分析”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table供应商进货分析.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHELPNull() {
                return this.IsNull(this.table供应商进货分析.HELPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHELPNull() {
                this[this.table供应商进货分析.HELPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDHNull() {
                return this.IsNull(this.table供应商进货分析.DHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDHNull() {
                this[this.table供应商进货分析.DHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table供应商进货分析.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table供应商进货分析.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJIANZNull() {
                return this.IsNull(this.table供应商进货分析.JIANZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJIANZNull() {
                this[this.table供应商进货分析.JIANZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJINZNull() {
                return this.IsNull(this.table供应商进货分析.JINZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJINZNull() {
                this[this.table供应商进货分析.JINZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table供应商进货分析.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table供应商进货分析.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTIMENull() {
                return this.IsNull(this.table供应商进货分析.SETTIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTIMENull() {
                this[this.table供应商进货分析.SETTIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table供应商进货分析.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table供应商进货分析.NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 销售统计Row : global::System.Data.DataRow {
            
            private 销售统计DataTable table销售统计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 销售统计Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table销售统计 = ((销售统计DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    try {
                        return ((string)(this[this.table销售统计.TMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“TM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.table销售统计.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JINZ {
                get {
                    try {
                        return ((double)(this[this.table销售统计.JINZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“JINZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.JINZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JIANZ {
                get {
                    try {
                        return ((double)(this[this.table销售统计.JIANZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“JIANZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.JIANZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSHI {
                get {
                    try {
                        return ((string)(this[this.table销售统计.ZSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ZSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.ZSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSHI {
                get {
                    try {
                        return ((string)(this[this.table销售统计.FSHIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“FSHI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.FSHIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IMGBOL {
                get {
                    try {
                        return ((bool)(this[this.table销售统计.IMGBOLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“IMGBOL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.IMGBOLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CBEI {
                get {
                    try {
                        return ((double)(this[this.table销售统计.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SALE {
                get {
                    try {
                        return ((double)(this[this.table销售统计.SALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SALE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZK {
                get {
                    try {
                        return ((string)(this[this.table销售统计.ZKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ZK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.ZKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SSALE {
                get {
                    try {
                        return ((double)(this[this.table销售统计.SSALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SSALE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SSALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETTIME {
                get {
                    try {
                        return ((string)(this[this.table销售统计.SETTIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SETTIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SETTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSS {
                get {
                    try {
                        return ((string)(this[this.table销售统计.ZSSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ZSS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.ZSSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSZ {
                get {
                    try {
                        return ((string)(this[this.table销售统计.ZSZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ZSZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.ZSZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSS {
                get {
                    try {
                        return ((string)(this[this.table销售统计.FSSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“FSS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.FSSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSZ {
                get {
                    try {
                        return ((string)(this[this.table销售统计.FSZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“FSZ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.FSZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JLIAO {
                get {
                    try {
                        return ((string)(this[this.table销售统计.JLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“JLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.JLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SLIAO {
                get {
                    try {
                        return ((string)(this[this.table销售统计.SLIAOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SLIAO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SLIAOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSI {
                get {
                    try {
                        return ((string)(this[this.table销售统计.SSIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SSI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KHU {
                get {
                    try {
                        return ((string)(this[this.table销售统计.KHUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“KHU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.KHUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table销售统计.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KUS {
                get {
                    try {
                        return ((string)(this[this.table销售统计.KUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“KUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.KUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZSHU {
                get {
                    try {
                        return ((string)(this[this.table销售统计.ZSHUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ZSHU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.ZSHUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIAN {
                get {
                    try {
                        return ((string)(this[this.table销售统计.MDIANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“MDIAN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.MDIANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SBM {
                get {
                    try {
                        return ((string)(this[this.table销售统计.SBMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SBM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SBMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table销售统计.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SLIANG {
                get {
                    try {
                        return ((int)(this[this.table销售统计.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DWEI {
                get {
                    try {
                        return ((string)(this[this.table销售统计.DWEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“销售统计”中列“DWEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table销售统计.DWEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMNull() {
                return this.IsNull(this.table销售统计.TMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMNull() {
                this[this.table销售统计.TMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.table销售统计.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.table销售统计.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJINZNull() {
                return this.IsNull(this.table销售统计.JINZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJINZNull() {
                this[this.table销售统计.JINZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJIANZNull() {
                return this.IsNull(this.table销售统计.JIANZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJIANZNull() {
                this[this.table销售统计.JIANZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSHINull() {
                return this.IsNull(this.table销售统计.ZSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSHINull() {
                this[this.table销售统计.ZSHIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSHINull() {
                return this.IsNull(this.table销售统计.FSHIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSHINull() {
                this[this.table销售统计.FSHIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMGBOLNull() {
                return this.IsNull(this.table销售统计.IMGBOLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMGBOLNull() {
                this[this.table销售统计.IMGBOLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table销售统计.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table销售统计.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALENull() {
                return this.IsNull(this.table销售统计.SALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALENull() {
                this[this.table销售统计.SALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZKNull() {
                return this.IsNull(this.table销售统计.ZKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZKNull() {
                this[this.table销售统计.ZKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSALENull() {
                return this.IsNull(this.table销售统计.SSALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSALENull() {
                this[this.table销售统计.SSALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTIMENull() {
                return this.IsNull(this.table销售统计.SETTIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTIMENull() {
                this[this.table销售统计.SETTIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSSNull() {
                return this.IsNull(this.table销售统计.ZSSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSSNull() {
                this[this.table销售统计.ZSSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSZNull() {
                return this.IsNull(this.table销售统计.ZSZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSZNull() {
                this[this.table销售统计.ZSZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSSNull() {
                return this.IsNull(this.table销售统计.FSSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSSNull() {
                this[this.table销售统计.FSSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSZNull() {
                return this.IsNull(this.table销售统计.FSZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSZNull() {
                this[this.table销售统计.FSZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJLIAONull() {
                return this.IsNull(this.table销售统计.JLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJLIAONull() {
                this[this.table销售统计.JLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIAONull() {
                return this.IsNull(this.table销售统计.SLIAOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIAONull() {
                this[this.table销售统计.SLIAOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSINull() {
                return this.IsNull(this.table销售统计.SSIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSINull() {
                this[this.table销售统计.SSIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKHUNull() {
                return this.IsNull(this.table销售统计.KHUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKHUNull() {
                this[this.table销售统计.KHUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table销售统计.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table销售统计.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKUSNull() {
                return this.IsNull(this.table销售统计.KUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKUSNull() {
                this[this.table销售统计.KUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZSHUNull() {
                return this.IsNull(this.table销售统计.ZSHUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZSHUNull() {
                this[this.table销售统计.ZSHUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANNull() {
                return this.IsNull(this.table销售统计.MDIANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANNull() {
                this[this.table销售统计.MDIANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSBMNull() {
                return this.IsNull(this.table销售统计.SBMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSBMNull() {
                this[this.table销售统计.SBMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table销售统计.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table销售统计.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table销售统计.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table销售统计.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDWEINull() {
                return this.IsNull(this.table销售统计.DWEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDWEINull() {
                this[this.table销售统计.DWEIColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 员工销售统计Row : global::System.Data.DataRow {
            
            private 员工销售统计DataTable table员工销售统计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 员工销售统计Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table员工销售统计 = ((员工销售统计DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table员工销售统计.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工销售统计”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工销售统计.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SLIANG {
                get {
                    try {
                        return ((int)(this[this.table员工销售统计.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工销售统计”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工销售统计.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SSALE {
                get {
                    try {
                        return ((double)(this[this.table员工销售统计.SSALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工销售统计”中列“SSALE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工销售统计.SSALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIAN {
                get {
                    try {
                        return ((string)(this[this.table员工销售统计.MDIANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工销售统计”中列“MDIAN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工销售统计.MDIANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.table员工销售统计.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“员工销售统计”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table员工销售统计.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table员工销售统计.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table员工销售统计.USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table员工销售统计.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table员工销售统计.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSALENull() {
                return this.IsNull(this.table员工销售统计.SSALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSALENull() {
                this[this.table员工销售统计.SSALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANNull() {
                return this.IsNull(this.table员工销售统计.MDIANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANNull() {
                this[this.table员工销售统计.MDIANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.table员工销售统计.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.table员工销售统计.IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 款式销售分析Row : global::System.Data.DataRow {
            
            private 款式销售分析DataTable table款式销售分析;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 款式销售分析Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table款式销售分析 = ((款式销售分析DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KUS {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析.KUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析”中列“KUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析.KUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SLIANG {
                get {
                    try {
                        return ((short)(this[this.table款式销售分析.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CBEI {
                get {
                    try {
                        return ((double)(this[this.table款式销售分析.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SSALE {
                get {
                    try {
                        return ((double)(this[this.table款式销售分析.SSALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析”中列“SSALE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析.SSALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKUSNull() {
                return this.IsNull(this.table款式销售分析.KUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKUSNull() {
                this[this.table款式销售分析.KUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table款式销售分析.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table款式销售分析.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table款式销售分析.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table款式销售分析.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSALENull() {
                return this.IsNull(this.table款式销售分析.SSALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSALENull() {
                this[this.table款式销售分析.SSALEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 款式销售分析详细Row : global::System.Data.DataRow {
            
            private 款式销售分析详细DataTable table款式销售分析详细;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 款式销售分析详细Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table款式销售分析详细 = ((款式销售分析详细DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TM {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.TMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“TM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.TMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KUS {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.KUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“KUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.KUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SETTIME {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.SETTIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“SETTIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.SETTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CBEI {
                get {
                    try {
                        return ((double)(this[this.table款式销售分析详细.CBEIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“CBEI”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.CBEIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SSALE {
                get {
                    try {
                        return ((double)(this[this.table款式销售分析详细.SSALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“SSALE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.SSALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZKOU {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.ZKOUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“ZKOU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.ZKOUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SLIANG {
                get {
                    try {
                        return ((short)(this[this.table款式销售分析详细.SLIANGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“SLIANG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.SLIANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KHU {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.KHUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“KHU”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.KHUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MDIAN {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.MDIANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“MDIAN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.MDIANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER {
                get {
                    try {
                        return ((string)(this[this.table款式销售分析详细.USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“款式销售分析详细”中列“USER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table款式销售分析详细.USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTMNull() {
                return this.IsNull(this.table款式销售分析详细.TMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTMNull() {
                this[this.table款式销售分析详细.TMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKUSNull() {
                return this.IsNull(this.table款式销售分析详细.KUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKUSNull() {
                this[this.table款式销售分析详细.KUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSETTIMENull() {
                return this.IsNull(this.table款式销售分析详细.SETTIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSETTIMENull() {
                this[this.table款式销售分析详细.SETTIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCBEINull() {
                return this.IsNull(this.table款式销售分析详细.CBEIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCBEINull() {
                this[this.table款式销售分析详细.CBEIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSALENull() {
                return this.IsNull(this.table款式销售分析详细.SSALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSALENull() {
                this[this.table款式销售分析详细.SSALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZKOUNull() {
                return this.IsNull(this.table款式销售分析详细.ZKOUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZKOUNull() {
                this[this.table款式销售分析详细.ZKOUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSLIANGNull() {
                return this.IsNull(this.table款式销售分析详细.SLIANGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSLIANGNull() {
                this[this.table款式销售分析详细.SLIANGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKHUNull() {
                return this.IsNull(this.table款式销售分析详细.KHUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKHUNull() {
                this[this.table款式销售分析详细.KHUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDIANNull() {
                return this.IsNull(this.table款式销售分析详细.MDIANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDIANNull() {
                this[this.table款式销售分析详细.MDIANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNull() {
                return this.IsNull(this.table款式销售分析详细.USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNull() {
                this[this.table款式销售分析详细.USERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class 门店发销退统计Row : global::System.Data.DataRow {
            
            private 门店发销退统计DataTable table门店发销退统计;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal 门店发销退统计Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table门店发销退统计 = ((门店发销退统计DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.table门店发销退统计.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店发销退统计”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店发销退统计.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a1 {
                get {
                    try {
                        return ((string)(this[this.table门店发销退统计.a1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店发销退统计”中列“a1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店发销退统计.a1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a2 {
                get {
                    try {
                        return ((string)(this[this.table门店发销退统计.a2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店发销退统计”中列“a2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店发销退统计.a2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a3 {
                get {
                    try {
                        return ((string)(this[this.table门店发销退统计.a3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店发销退统计”中列“a3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店发销退统计.a3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string a4 {
                get {
                    try {
                        return ((string)(this[this.table门店发销退统计.a4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“门店发销退统计”中列“a4”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.table门店发销退统计.a4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.table门店发销退统计.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.table门店发销退统计.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isa1Null() {
                return this.IsNull(this.table门店发销退统计.a1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seta1Null() {
                this[this.table门店发销退统计.a1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isa2Null() {
                return this.IsNull(this.table门店发销退统计.a2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seta2Null() {
                this[this.table门店发销退统计.a2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isa3Null() {
                return this.IsNull(this.table门店发销退统计.a3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seta3Null() {
                this[this.table门店发销退统计.a3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isa4Null() {
                return this.IsNull(this.table门店发销退统计.a4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seta4Null() {
                this[this.table门店发销退统计.a4Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 地区RowChangeEvent : global::System.EventArgs {
            
            private 地区Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区RowChangeEvent(地区Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 地区Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 客户RowChangeEvent : global::System.EventArgs {
            
            private 客户Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户RowChangeEvent(客户Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 供应商RowChangeEvent : global::System.EventArgs {
            
            private 供应商Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商RowChangeEvent(供应商Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门店RowChangeEvent : global::System.EventArgs {
            
            private 门店Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店RowChangeEvent(门店Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 员工RowChangeEvent : global::System.EventArgs {
            
            private 员工Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工RowChangeEvent(员工Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 金料RowChangeEvent : global::System.EventArgs {
            
            private 金料Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料RowChangeEvent(金料Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金料Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 石料RowChangeEvent : global::System.EventArgs {
            
            private 石料Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料RowChangeEvent(石料Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 石料Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 首饰RowChangeEvent : global::System.EventArgs {
            
            private 首饰Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰RowChangeEvent(首饰Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 首饰Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 净度RowChangeEvent : global::System.EventArgs {
            
            private 净度Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度RowChangeEvent(净度Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 净度Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 单位RowChangeEvent : global::System.EventArgs {
            
            private 单位Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位RowChangeEvent(单位Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 单位Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 仓库RowChangeEvent : global::System.EventArgs {
            
            private 仓库Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库RowChangeEvent(仓库Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 仓库Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class goodsRowChangeEvent : global::System.EventArgs {
            
            private goodsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRowChangeEvent(goodsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public goodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class stongRowChangeEvent : global::System.EventArgs {
            
            private stongRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongRowChangeEvent(stongRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stongRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 形状RowChangeEvent : global::System.EventArgs {
            
            private 形状Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状RowChangeEvent(形状Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 形状Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 切工RowChangeEvent : global::System.EventArgs {
            
            private 切工Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工RowChangeEvent(切工Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 切工Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 金汇分销单RowChangeEvent : global::System.EventArgs {
            
            private 金汇分销单Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单RowChangeEvent(金汇分销单Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 金汇分销单Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 颜色RowChangeEvent : global::System.EventArgs {
            
            private 颜色Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色RowChangeEvent(颜色Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 颜色Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 入库单列表RowChangeEvent : global::System.EventArgs {
            
            private 入库单列表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表RowChangeEvent(入库单列表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 入库单列表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 产品状态RowChangeEvent : global::System.EventArgs {
            
            private 产品状态Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态RowChangeEvent(产品状态Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 产品状态Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 分销暂存RowChangeEvent : global::System.EventArgs {
            
            private 分销暂存Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存RowChangeEvent(分销暂存Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 分销暂存Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 发货单列表RowChangeEvent : global::System.EventArgs {
            
            private 发货单列表Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表RowChangeEvent(发货单列表Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 发货单列表Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 员工STATRowChangeEvent : global::System.EventArgs {
            
            private 员工STATRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATRowChangeEvent(员工STATRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工STATRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 调成本价RowChangeEvent : global::System.EventArgs {
            
            private 调成本价Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价RowChangeEvent(调成本价Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调成本价Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 成本查询RowChangeEvent : global::System.EventArgs {
            
            private 成本查询Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询RowChangeEvent(成本查询Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 成本查询Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 调销售价RowChangeEvent : global::System.EventArgs {
            
            private 调销售价Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价RowChangeEvent(调销售价Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 调销售价Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 售价调价记录RowChangeEvent : global::System.EventArgs {
            
            private 售价调价记录Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录RowChangeEvent(售价调价记录Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 售价调价记录Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门店退货RowChangeEvent : global::System.EventArgs {
            
            private 门店退货Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货RowChangeEvent(门店退货Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店退货Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 客户积分RowChangeEvent : global::System.EventArgs {
            
            private 客户积分Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分RowChangeEvent(客户积分Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 客户积分Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 供应商进货分析RowChangeEvent : global::System.EventArgs {
            
            private 供应商进货分析Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析RowChangeEvent(供应商进货分析Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 供应商进货分析Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 销售统计RowChangeEvent : global::System.EventArgs {
            
            private 销售统计Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计RowChangeEvent(销售统计Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 销售统计Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 员工销售统计RowChangeEvent : global::System.EventArgs {
            
            private 员工销售统计Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计RowChangeEvent(员工销售统计Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 员工销售统计Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 款式销售分析RowChangeEvent : global::System.EventArgs {
            
            private 款式销售分析Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析RowChangeEvent(款式销售分析Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 款式销售分析详细RowChangeEvent : global::System.EventArgs {
            
            private 款式销售分析详细Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细RowChangeEvent(款式销售分析详细Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 款式销售分析详细Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class 门店发销退统计RowChangeEvent : global::System.EventArgs {
            
            private 门店发销退统计Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计RowChangeEvent(门店发销退统计Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public 门店发销退统计Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591